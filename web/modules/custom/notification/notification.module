<?php

/**
 * @file
 * Contains notification.module.
 * Hooks & general code for the Acas notifications
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Language\Language;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_help().
 */
function notification_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas notification module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view().
 */
function notification_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full' && $entity instanceof \Drupal\node\NodeInterface) {
    if (isset($_COOKIE['webform_preview'])) {
      unset($_COOKIE['webform_preview']);
      setcookie('webform_preview', null, -1, '/');
    }
  }
}

/**
 * Implements hook_webform_submission_form_alter
 */
function notification_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['elements']['form_type']['#value'])) {
    // Either a Notification or Conciliation form
    if (preg_match('/MSIE\s(?P<v>\d+)/i', @$_SERVER['HTTP_USER_AGENT'], $B) && $B['v'] <= 8) {
      // Browsers IE 8 and below
      $response = new RedirectResponse('/ie8');
      $response->send();
      return;
    }
    $config = \Drupal::config('afd.settings');
    $form['#attached']['library'][] = 'notification/notification_form';
    $form['#attached']['drupalSettings']['afd'] = [
      'url' => $config->get('url'),
      'token' => $config->get('token'),
    ];
    if (@$form['actions']['wizard_prev']) {
      if (!@$_COOKIE['webform_preview']) {
        $form['back'] = $form['actions']['wizard_prev'];
        $form['back']['#value'] = 'Back';
        $form['back']['#weight'] = -10;
        $form['back']['#attributes']['class'][] = 'back--link';
      }
      unset($form['actions']['wizard_prev']);
    }
    if (@$form['actions']['preview_prev']) {
      unset($form['actions']['preview_prev']);
    }
    if (@$form['actions']['draft']) {
      $form['actions']['draft']['#attributes']['class'][] = 'btn-secondary';
    }
    if (@$form['actions']['wizard_next']) {
      $form['actions']['wizard_next']['#attributes']['class'][] = 'btn-primary';
    }
    if (@$form['actions']['submit']) {
      $form['actions']['submit']['#attributes']['class'][] = 'btn-primary';
    }
    $element_key = $form_state->getTriggeringElement();
    //if ($element_key && strpos($element_key['#id'], 'edit-actions-wizard-next') !== FALSE) {
      if (@$_COOKIE['webform_preview']) {
        $pages = $form_state->get('pages');
        $all_keys = array_keys($pages);
        $goto_destination_page_index = array_search('webform_preview', $all_keys);
        if($goto_destination_page_index > 0){
          $form_state->set('current_page', $all_keys[$goto_destination_page_index -1]);
        }
      }
      else {
        $current_page = $form_state->get('current_page');
        if ($current_page == 'webform_preview') {
          setcookie('webform_preview', '1', NULL, '/');
        }
      }
    //}
    if ($element_key && strpos($element_key['#id'], 'edit-actions-preview-next') !== FALSE) {
      setcookie('webform_preview', '1', NULL, '/');
    }
    if ($acas_ecref = \Drupal::request()->query->get('acas_ecref')) {
      $form['elements']['acas_ecref']['#value'] = $acas_ecref;
      // Load form1 data to see if have email or phone
      $db = \Drupal::database();
      $result = $db->select('acas_ecrefno', 'a')
        ->fields('a', ['sid1'])
        ->condition('a.reference_no', $acas_ecref, '=')
        ->execute()
        ->fetchAll();
      if (count($result) && $wfs = WebformSubmission::load($result[0]->sid1)) {
        $form1_data = $wfs->getData();
        //$form1_data['acas_emailaddress'] = '';
        //$form1_data['acas_maincontactnumber'] = '';
        if (!$form1_data['acas_emailaddress'] && !$form1_data['acas_maincontactnumber']) {
          $form['elements']['page1']['introduction_to_form']['#markup'] = str_replace('[LETTER]', 'Your claim reference number is <strong>' . $acas_ecref . '</strong>, submitted at <strong>' . date('h:i A \o\n d F Y') . '</strong><br /><br />You did not give us an email address or phone number. We will send you a letter confirming your claim reference number.', $form['elements']['page1']['introduction_to_form']['#markup']);
        }
        else {
          $form['elements']['page1']['introduction_to_form']['#markup'] = str_replace('[LETTER]', '', $form['elements']['page1']['introduction_to_form']['#markup']);
        }
      }
      else {
        $form['elements']['page1']['introduction_to_form']['#markup'] = str_replace('[LETTER]', '', $form['elements']['page1']['introduction_to_form']['#markup']);
      }
    }
  }
  
  if ($form_id == 'webform_submission_group_notification_add_form') {
    $form['#validate'][] = 'notification_group_claimants_upload_validate';
  }
}

function notification_group_claimants_upload_validate(&$form, FormStateInterface &$form_state) {
  if ($form_state->getValue('op') == 'Continue' && $template = @$form_state->getValue('claimants')) {
    $file = \Drupal\file\Entity\File::load($template);
    $parts = parse_url($file->getFileUri());
    module_load_include('inc', 'phpexcel', 'phpexcel');
    if (!$objPHPExcel = phpexcel_import('/var/www/html/web/sites/default/files/private/webform' . $parts['path'])) {
      $form_state->setErrorByName('claimant', 'You must include at least one claimant in the spreadsheet!');
    }
    else {
      $msg = '';
      $count = 0;
      // Check for no header eg
      if (key($objPHPExcel[0][0]) != 'First name') {
        $msg .= 'Incorrect or missing Header!<br />';
      }
      else {
        foreach($objPHPExcel[0] as $key => $value) {
          if (!$value['First name']) {
            $msg .= 'Row ' . ($key + 2) . " missing <b>First name</b>!<br />";
          }
          if (!$value['Address line 1']) {
            $msg .= 'Row ' . ($key + 2). " missing <b>Address line 1</b>!<br />";
          }
          if (!$value['City/Town']) {
            $msg .= 'Row ' . ($key + 2) . " missing <b>City/Town</b>!<br />";
          }
          $count++;
        }
      }
      if ($msg) {
        $msg .= 'Please correct these errors and re-upload your spreadsheet.';
        $rendered_message = \Drupal\Core\Render\Markup::create($msg);
        $error_message = new TranslatableMarkup ('@message', array('@message' => $rendered_message));
        $form_state->setErrorByName('claimant', $error_message);
      }
      else {
        //drupal_set_message("Imported $count Claimants");
        setcookie('claimants', $count);
        //$form['elements']['your_details']['rep_details_markup_04']['#markup'] = "<p>Imported $count Claimants</p>" . $form['elements']['your_details']['rep_details_markup_04']['#markup'];
      }

    }
  }
}

/**
 * Implements the EC Entry Switch
 */
function notification_ec_entry_switch() {
  // See if a returning user (ec_entry cookie is set)
  // For testing, can bypass this test by adding ?nc=1 to URL
  if (isset($_COOKIE['ec_entry']) && !\Drupal::request()->query->get('nc')) {
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->join('node__field_destination', 'dest', 'dest.entity_id = nfd.nid');
    $query->fields('dest', ['field_destination_uri']);
    $query->condition('nfd.title', $_COOKIE['ec_entry'], '=');
    $result = $query->execute();
    if ($dest = $result->fetchCol()) {
      $response = new RedirectResponse($dest[0]);
      $response->send();
      return;
    }
  }
  // Set the cookie so a returning user will always be re-directed to their original path
  $cookie = time() . rand(1, 9999);
  setcookie('ec_entry', $cookie, time() + (86400 * 30), '/', '', TRUE);
  if (isset($_SERVER['HTTP_REFERER'])) {
    $referer = $_SERVER['HTTP_REFERER'];
  }
  else {
    $referer = 'https://' . $_SERVER['HTTP_HOST'];
  }
  // Load service to detect if a mobile
  $mobileDetector = \Drupal::service('mobile_detect');
  // Set the values for the ec_entry node
  $values = array(
    'title' => $cookie,
    'type' => 'ec_entry',
    'language' => Language::LANGCODE_NOT_SPECIFIED,
    'uid' => 0,
    'name' => 'Anonymous',
    'field_mobile' => $mobileDetector->isMobile(),
    'field_referer' => ['uri' => $referer, 'title' => '', 'options' => []],
  );
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('ec_entry_switch.settings');
  $enabled = TRUE;
  $now = time() - strtotime("today");
  $today = date('D');
  // Test if the user should be re-directed to the new form
  if (!$config->get('enabled')) {
    $enabled = FALSE;
  }
  elseif ($config->get('current_in_count') >= $config->get('in_count') || $config->get('current_out_count') >= $config->get('out_count')) {
    $enabled = FALSE;
  }
  elseif ($config->get('start_time') && $config->get('end_time') && ($now < $config->get('start_time') || $now > $config->get('end_time'))) {
    $enabled = FALSE;
  }
  elseif ($config->get('weekend') && ($today == 'Sat' || $today == 'Sun')) {
    $enabled = FALSE;
  }
  if (!$enabled) {
    // Re-direct to the old form
    $url = $config->get('old_url');
    if ($mobileDetector->isMobile()) {
      $url = str_replace('www.', 'm.', $url);
    }
    $values['field_destination'] = ['uri' => $url, 'title' => '', 'options' => []];
    $node = \Drupal::entityTypeManager()->getStorage('node')->create($values);
    $node->save();
    $response = new RedirectResponse($url);
  }
  else {
    // Re-direct to the new form.
    $values['field_destination'] = ['uri' => $config->get('new_url'), 'title' => '', 'options' => []];
    $node = \Drupal::entityTypeManager()->getStorage('node')->create($values);
    $node->save();
    // Update the in count
    $config->set('current_in_count', $config->get('current_in_count') + 1);
    $config->save();
    $response = new RedirectResponse($config->get('new_url'));
  }
  // Send the re-direct response
  $response->send();
}

/**
 * Implements hook_cron().
 */
function notification_cron() {
  $hour = (int)date('H');
  if ($hour >= 3 && $hour <= 7) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('ec_entry_switch.settings');
    if ($config->get('current_in_count') || $config->get('current_out_count')) {
      $config->set('current_in_count', 0)->set('current_out_count', 0)->save();
      \Drupal::logger('notification')->notice('Cleared current counts.');
    }
  }
}

function notification_company_house($employer) {
  $config = \Drupal::config('companies_house.settings');
  $api = new companiesHouseApi($config->get('api'));
  $response = $api->send('/search/companies', ['q' => $employer]);
  $return = [];
  foreach($response['items'] as $item) {
    if ($item['company_status'] == 'active') {
      $return[] = $item;
    }
  }
  return $return;
}

// Called by a CRON job every 5 mins.
// Try resending any failed GUID or Dynamics calls.
function notification_retry_send_dynamics() {
  $db = \Drupal::database();
  $config = \Drupal::config('dynamics.settings');
  $result = $db->select('acas_ecrefno', 'a')
    ->fields('a', ['id', 'guid', 'status', 'data'])
    ->condition('a.status', 2, '>')
    ->execute()
    ->fetchAll();
  foreach($result as $a) {
    $data = unserialize($a->data);
    if ($a->status == 3) {
      // Notification
      if (notification_send_dynamics($data)) {
        // All good.
        // Don't neeed the record in acas_ecrefno anymore.
        $db->delete('acas_ecrefno')
          ->condition('reference_no', $data['acas_ecref'], '=')
          ->execute();
      }
    }
    else {
      // Conciliation
      if (!$a->guid) {
        $url = $config->get('guid_url') . '?si_token=' . $config->get('guid_token') . '&acas_ecref=' . $data['acas_ecref'];
        $guid = file_get_contents($url);
        if (strpos($guid, '<error>') !== FALSE) {
          break;
        }
        else {
          $j = json_decode($guid);
          if (isset($j->value[0])) {
            $guid = $j->value[0]->incidentid;
          }
        }
      }
      else {
        $guid = $a->guid;
      }
      if (notification_send_dynamics($data)) {
        // All good.
        // Don't neeed the record in acas_ecrefno anymore.
        $db->delete('acas_ecrefno')
          ->condition('id', $a->id, '=')
          ->execute();
      }
    }
  }
  return 'ok';
}

/**
 * Implements notification_confirmation_group().
 *
 * The submission from the group Notification & Conciliation WebForms
 */
function notification_confirmation_group($webform, $webform_submission_id) {
  if (!$webform_submission = WebformSubmission::load($webform_submission_id)) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  if (!$data = $webform_submission->getData()) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  drupal_get_messages();
  if (isset($_COOKIE['webform_preview'])) {
    unset($_COOKIE['webform_preview']);
    setcookie('webform_preview', null, -1, '/');
  }
  if ($data['form_type'] == 'GroupNotification') {
    $data['acas_formtype'] = '602700000';
    $refnumber = notification_build_reference_number('group');
    $data['acas_groupid'] = $refnumber;
    notification_group_claiments_generate($data, $webform_submission_id);
    //notification_send_dynamics($data);
    $response = new RedirectResponse('/group-conciliation?acas_ecref=' . $data['acas_groupid']);
    $response->send();
    return;
  }
  elseif ($data['form_type'] == 'GroupConciliation') {
    $number = '';
    $data['acas_formtype'] = '602700001';
    $db = \Drupal::database();
    // Get Notification form data for names in the email & timestamp;
    $result = $db->select('acas_ecrefno', 'a')
      ->fields('a', ['sid1', 'timestamp'])
      ->condition('a.group_no', $data['acas_ecref'], '=')
      ->execute()
      ->fetchAll();
    if (count($result) && $wfs = WebformSubmission::load($result[0]->sid1)) {
      $form1_data = $wfs->getData();
      $date = strtotime($result[0]->timestamp);
      $form1_sid = $result[0]->sid1;
    }
    else {
      $form1_data = [];
      $date = time();
      $form1_sid = 0;
    }
    $nid = 133;
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $node = \Drupal\node\Entity\Node::load($nid);
    if ($node->hasField('field_subject')) {
        $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $form1_data['acas_claimrepfirstname'], $node->field_subject->getString());
        $data['acas_emailbody'] = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', $date + 2419200), str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($form1_data['acas_claimrepfirstname'] . ' ' . $form1_data['acas_claimrepsurname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_ecref'], $node->field_message->getString())))));
      }
    $view = $view_builder->view($node, 'full');
    $html = drupal_render($view);
    $html = str_replace('[REFERENCE]', $data['acas_ecref'], $html);
    $html = str_replace('[DATE]', date('h:i A \o\n d F Y', $date), $html);
    $html = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', $date + 2419200), $html);
    $html = str_replace('[PROBLEM]', '', $html);
    $html = '<header id="block-acas-page-title left" class="contextual-region block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="thank-you-page-header">' . $node->getTitle() . '</h1></header>' . $html;
    return $html;
  }
}

/**
 * Implements notification_confirmation().
 *
 * The submission from the individual Notification & Conciliation WebForms
 */
function notification_confirmation($webform, $webform_submission_id) {
  if (!$webform_submission = WebformSubmission::load($webform_submission_id)) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  if (!$data = $webform_submission->getData()) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  drupal_get_messages();
  if (isset($_COOKIE['webform_preview'])) {
    unset($_COOKIE['webform_preview']);
    setcookie('webform_preview', null, -1, '/');
  }
  if ($data['form_type'] == 'Notification') {
    $data['acas_formtype'] = '602700000';
    if ($data['form_type'] == 'Notification') {
      $refnumber = notification_build_reference_number();
      $data['acas_eccaserefnumber'] = $refnumber;
    }
    else {
      $refnumber = notification_build_reference_number('group');
      $data['acas_groupid'] = $refnumber;
      notification_group_claiments_generate($data);
    }
    $data['acas_dateofreceipt'] = date('Y-m-d');
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('ec_entry_switch.settings');
    $config->set('current_out_count', $config->get('current_out_count') + 1);
    $config->save();
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->fields('nfd', ['nid']);
    $query->condition('nfd.title', @$_COOKIE['ec_entry'], '=');
    $result = $query->execute();
    if ($nid = $result->fetchCol()) {
      $node = \Drupal\node\Entity\Node::load($nid[0]);
      $node->field_end->value = date('Y-m-d\TH:i:s', time() - date('Z'));
      $node->save();
    }
    $db = \Drupal::database();
    $fields = ['sid1' => $webform_submission_id, 'reference_no' => $refnumber];
    $db->insert('acas_ecrefno')
      ->fields($fields)
      ->execute();
    if ($data['are_you_interested_in_settling_your_case_before_tribunal_'] == 'Yes' || $data['are_you_interested_in_settling_your_case_before_tribunal_'] == 1 || !$data['are_you_interested_in_settling_your_case_before_tribunal_']) {
      // Wants conciliation
      notification_send_dynamics($data);
      $response = new RedirectResponse('/start-conciliation?acas_ecref=' . $data['acas_eccaserefnumber']);
      $response->send();
      return;
    }
    else {
      // Does not want conciliation
      $config = \Drupal::config('acas.settings');
      $number = $config->get('g10_flagged_phone');
      $nid = 117;
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $node = \Drupal\node\Entity\Node::load($nid);
      
      if ($node->hasField('field_subject')) {
        $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $data['acas_firstname'], $node->field_subject->getString());
        $data['acas_emailbody'] = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', time() + 2419200), str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($data['acas_firstname'] . ' ' . $data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $node->field_message->getString())))));
      }
      if (!$result = notification_send_dynamics($data)) {
        // Set to retry on CRON job, status = 3
        $db->update('acas_ecrefno')
          ->fields(['status' => 3, 'data' => serialize($data)])
          ->condition('reference_no', $data['acas_eccaserefnumber'], '=')
          ->execute();
      }
      // Delete the webform data. GDPR cop-out.
      notification_delete_webform_submission($webform_submission_id);
      $view = $view_builder->view($node, 'full');
      $html = drupal_render($view);
      $html = str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $html);
      $html = str_replace('[DATE]', date('h:i A \o\n d F Y'), $html);
      $html = str_replace('[NUMBER]', $number, $html);
      $html = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', time() + 2419200), $html);
      if (!$result && $node->hasField('field_problem_message')) {
        if ($problem = $node->field_problem_message->getValue()) {
          $html = str_replace('[PROBLEM]', $problem[0]['value'], $html);
        }
      }
      else {
        $html = str_replace('[PROBLEM]', '', $html);
      }
      if (@$data['is_this_employer_still_trading'] == 'No') {
        $html = str_replace('[SPECIFIC GUIDANCE]', 'You told us that your employer has ceased trading. You can <a href="https://www.gov.uk/your-rights-if-your-employer-is-insolvent" target="_blank">find out what rights you have as the employee of an insolvent employer on GOV.UK.</a>', $html);
      }
      else {
        $html = str_replace('[SPECIFIC GUIDANCE]', '', $html);
      }
      $html = '<header id="block-acas-page-title left" class="contextual-region block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="thank-you-page-header">' . $node->getTitle() . '</h1></header>' . $html;
      return $html;
    }
  }
  elseif ($data['form_type'] == 'Conciliation') {
    // GetGUID.
    $config = \Drupal::config('dynamics.settings');
    $url = $config->get('guid_url') . '?si_token=' . $config->get('guid_token') . '&acas_ecref=' . $data['acas_ecref'];
    $guid = file_get_contents($url);
    $data['guid'] = '';
    if (strpos($guid, '<error>') !== FALSE) {
      $guid = NULL;
    }
    else {
      $j = json_decode($guid);
      if (isset($j->value[0])) {
        $data['guid'] = $j->value[0]->incidentid;
      }
    }
    $data['acas_formtype'] = '602700001';
    $config = \Drupal::config('acas.settings');
    $flags = notification_flags($data);
    $db = \Drupal::database();
    // Get Notification form data for names in the email & timestamp;
    $result = $db->select('acas_ecrefno', 'a')
      ->fields('a', ['sid1', 'timestamp'])
      ->condition('a.reference_no', $data['acas_ecref'], '=')
      ->execute()
      ->fetchAll();
    if (count($result) && $wfs = WebformSubmission::load($result[0]->sid1)) {
      $form1_data = $wfs->getData();
      $date = strtotime($result[0]->timestamp);
      $form1_sid = $result[0]->sid1;
    }
    else {
      $form1_data = [];
      $date = time();
      $form1_sid = 0;
    }
      
    // Wages or holiday (not anything else) = fasttracked
    $number = '';
    if ($data['do_you_believe_that_you_have_been_discriminated_against'] != 1 && !$data['do_you_believe_you_have_been_unfairly_dismissed_or_made_redundan'] != 2 && ($data['do_you_think_you_are_owed_wages'] == 1 || $data['do_you_think_you_are_owed_holiday_by_your_employer'] == 1)) {
      $nid = 126;
      // Fasttrack number
      $number = $config->get('g10_fasttrack_phone');
    }
    elseif (!$flags){
      $nid = 114;
    }
    else {
      $nid = 118;
      // Flaged number
      $number = $config->get('g10_flagged_phone');
    }
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    if (!$node = \Drupal\node\Entity\Node::load($nid)) {
      $node = \Drupal\node\Entity\Node::load(94);
    }
    if ($form1_data && $node->hasField('field_subject')) {
      $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $form1_data['acas_firstname'], $node->field_subject->getString());
      $data['acas_emailbody'] = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', $date + 2419200), str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($form1_data['acas_firstname'] . ' ' . $form1_data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y', $date), str_replace('[REFERENCE]', $data['acas_ecref'], $node->field_message->getString())))));
    }
    $result = TRUE;
    if ($data['guid']) {
      $data['acas_dateofreceipt'] = date('Y-m-d', $date);
      $result = notification_send_dynamics($data);
    }
    if ($data['guid'] && $result) {
      // Don't neeed the record in acas_ecrefno anymore.
      $db->delete('acas_ecrefno')
        ->condition('reference_no', $data['acas_ecref'], '=')
        ->execute();
    }
    else {
      // Either get GUID or call to Dynamics has failed
      // Update status, data and the sid of this form
      // Status of 4 means try again on cron.
      $db->update('acas_ecrefno')
        ->fields(['status' => 4, 'sid2' => $webform_submission_id, 'data' => serialize($data)])
        ->condition('reference_no', $data['acas_ecref'], '=')
        ->execute();
    }
    // Delete the webform data. GDPR cop-out.
    if ($form1_sid) {
      // Form1
      notification_delete_webform_submission($form1_sid);
    }
    // Form 2
    notification_delete_webform_submission($webform_submission_id);
    $view = $view_builder->view($node, 'full');
    $html = drupal_render($view);
    $html = str_replace('[REFERENCE]', $data['acas_ecref'], $html);
    $html = str_replace('[DATE]', date('h:i A \o\n d F Y', $date), $html);
    $html = str_replace('[NUMBER]', $number, $html);
    $html = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', time() + 2419200), $html);
    if (!$data['guid'] || !$result && $node->hasField('field_problem_message')) {
      if ($problem = $node->field_problem_message->getValue()) {
        $html = str_replace('[PROBLEM]', $problem[0]['value'], $html);
      }
    }
    else {
      $html = str_replace('[PROBLEM]', '', $html);
    }
    if (@$data['is_this_employer_still_trading'] == 'No') {
      $html = str_replace('[SPECIFIC GUIDANCE]', 'You told us that your employer has ceased trading. You can <a href="https://www.gov.uk/your-rights-if-your-employer-is-insolvent" target="_blank">find out what rights you have as the employee of an insolvent employer on GOV.UK.</a>', $html);
    }
    else {
      $html = str_replace('[SPECIFIC GUIDANCE]', '', $html);
    }
    $html = '<header id="block-acas-page-title left" class="contextual-region block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="thank-you-page-header">' . $node->getTitle() . '</h1></header>' . $html;
    return $html;
  }
}

function notification_group_claiments_generate($data, $webform_submission_id) {
  if ($data['claimants']) {
    $file = \Drupal\file\Entity\File::load($data['claimants']);
    $parts = parse_url($file->getFileUri());
    module_load_include('inc', 'phpexcel', 'phpexcel');
    if (!$objPHPExcel = phpexcel_import('/var/www/html/web/sites/default/files/private/webform' . $parts['path'])) {
      return FALSE;
    }
    $db = \Drupal::database();
    foreach ($objPHPExcel[0] as $claimant) {
      $data['acas_eccaserefnumber'] = notification_build_reference_number();
      $data['acas_firstname'] = $claimant['First name'];
      $data['acas_surname'] = $claimant['Last name'];
      $data['claimant_address'] = [
        'address' => $claimant['Address line 1'],
        'address_2' => $claimant['Address line 2'],
        'city' => $claimant['City/Town'],
        'postal_code' => $claimant['Postcode'],
      ];
      $fields = ['sid1' => $webform_submission_id, 'reference_no' => $data['acas_eccaserefnumber'], 'group_no' => $data['acas_groupid']];
      $db->insert('acas_ecrefno')
        ->fields($fields)
        ->execute();
      //$result = notification_send_dynamics($data);
    }
  }
}

/**
 * Implements notification_flags().
 *
 * Build the flags for Dynamics
 */
function notification_flags($data) {
  $flags = [];
  foreach($data as $key => $value) {
    // Form1
    if ($key == 'are_you_interested_in_settling_your_case_before_tribunal_' && $value == 2) {
      $flags['acas_flagnoconciliation'] = TRUE;
    }
    // All form 2
    if ($key == 'problem_several_colleagues' && $value == 2) {
      $flags['acas_flagoneofseveralemployees'] = TRUE;
    }
    if ($key == 'is_this_employer_still_trading' && $value == 'No') {
      $flags['acas_flaginsolvency'] = TRUE;
    }
    if ($key == 'have_you_been_employed_by_this_employer_for_a_2_years_or_more_' && $value == 'No') {
      $flags['acas_flaglessthan2yearsemployment'] = TRUE;
    }
    if ($key == 'when_were_you_dismissed' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $a = strtotime($date);
      // 3 months
      if (time() - strtotime($date) > (86400 * 89)) {
        $flags['acas_flagoutoftime'] = TRUE;
      }
    }
    if ($key == 'when_were_you_made_redundant_optional_' && $value && $value['day'] && $value['month'] && $value['year'] && $data['is_your_dispute_about_redundancy_pay_optional_'] == 2) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      // 6 months
      if (time() - strtotime($date) > (86400 * 179)) {
        $flags['acas_flagoutoftime6month'] = TRUE;
      }
    }
    if ($key == 'when_were_you_not_paid_properly_optional_' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      // 3 months
      if (time() - strtotime($date) > (86400 * 89)) {
        $flags['acas_flagoutoftime'] = TRUE;
      }
    }
    if ($key == 'have_you_asked_your_employer_in_writing_to_resolve_this_dispute_' && $value == 1) {
      $flags['acas_flaginternalprocessnotcomplete'] = TRUE;
    }
  }
  return $flags;
}

/**
 * Implements notification_send_dynamics().
 *
 * Build the JSON and send to Dynamics.
 * URLEncode all text fields.
 */
function notification_send_dynamics($data) {
  $json = [];
  $json['form_type'] = str_replace('Group', '', $data['form_type']);
  if ($flags = notification_flags($data)) {
    $json = array_merge($json, $flags);
  }
  $incident_type = [];
  $info = '';
  $dates = [];
  if (isset($data['guid'])) {
    $json['guid'] = $data['guid'];
  }
  foreach($data as $key => $value) {
    if (is_string($value) && strpos($key, 'acas_') !== FALSE) {
      if ($key != 'acas_eccsaerefnumber') {
        $json[$key] = urlencode($value);
      }
      else {
        $json[$key] = $value;
      }
    }
    elseif (is_array($value) && strpos($key, '_address') !== FALSE) {
      if ($key == 'claimant_address') {
        $json['acas_addressline1'] = urlencode($value['address']);
        $json['acas_addressline2'] = urlencode($value['address_2']);
        $json['acas_citytown'] = urlencode($value['city']);
        $json['acas_postcode'] = urlencode($value['postal_code']);
      }
      elseif ($key == 'representative_address') {
        $json['acas_claimrepaddressline1'] = urlencode($value['address']);
        $json['acas_claimrepaddressline2'] = urlencode($value['address_2']);
        $json['acas_claimrepcitytown'] = urlencode($value['city']);
        $json['acas_claimreppostcode'] = urlencode($value['postal_code']);
      }
      elseif ($key == 'respondant_address') {
        $json['acas_respaddressline1'] = urlencode($value['address']);
        $json['acas_respaddressline2'] = urlencode($value['address_2']);
        $json['acas_respcitytown'] = urlencode($value['city']);
        $json['acas_resppostcode'] = urlencode($value['postal_code']);
      }
    }
    elseif (is_array($value) && @$value['phone']) {
      $json[$key] = urlencode($value['phone']);
      if ($value['ext']) {
        $json[$key] . 'x' . urlencode($value['ext']);
      }
    }
    elseif (is_array($value) && @$key == 'acas_modeofcontact') {
      $json['acas_modeofcontact'] = implode(',', $value);
    }
    if ($key == 'do_you_believe_that_you_have_been_discriminated_against' && $value) {
      $incident_type[] = '602700003';
      unset($data[$key]);
    }
    if ($key == 'do_you_think_you_are_owed_holiday_by_your_employer' && $value) {
      $incident_type[] = '602700001';
      unset($data[$key]);
    }
    if ($key == 'do_you_think_you_are_owed_wages' && $value) {
      $incident_type[] = '602700000';
      unset($data[$key]);
    }
    if ($key == 'do_you_believe_you_have_been_unfairly_dismissed_or_made_redundan' && $value) {
      if ($value == 2) {
        // unfairly dismissed
        $incident_type[] = '602700002';
      }
      elseif ($value == 3) {
        // made redundant
        $incident_type[] = '602700004';
      }
      unset($data[$key]);
    }
    if ($key == 'are_you_currently_unemployed_' && $value == 'Yes') {
      $info .= "Claimant is currently unemployed.\n";
      unset($data[$key]);
    }
    if ($key == 'did_you_have_a_meeting_with_your_employer_before_you_were_dismis' && $value) {
      if ($value == 'Yes') {
        $h = 'has';
      }
      else {
        $h = 'has not';
      }
      $info .= "Claimant $h had a meeting with their employer before they were dismissed.\n";
      unset($data[$key]);
    }
    if ($key == 'did_you_meet_with_your_employer_after_you_were_dismissed_' && $value) {
      if ($value == 'Yes') {
        $h = 'has';
      }
      else {
        $h = 'has not';
      }
      $info .= "Claimant $h had a meeting with their employer after they were dismissed.\n";
      unset($data[$key]);
    }
    if ($key == 'please_give_us_a_brief_explanation_about_your_claim' && $value) {
      $info .= $value . "\n";
    }
    if ($key == 'did_your_employer_given_any_explanation_optional_' && $value) {
      $info .= "Employer explanation: $value\n";
      unset($data[$key]);
    }
    if ($key == 'do_you_know_what_you_want_as_an_outcome_' && $value) {
      $info .= "Claimant wants: $value\n";
      unset($data[$key]);
    }
    if ($key == 'do_you_know_what_you_want_as_an_outcome_2' && $value) {
      $info .= "Claimant wants: $value\n";
      unset($data[$key]);
    }
    if ($key == 'do_you_know_what_you_want_as_an_outcome_3' && $value) {
      $info .= "Claimant wants: $value\n";
      unset($data[$key]);
    }
    if ($key == 'explain_why_you_think_you_are_owed_wages_optional_' && $value) {
      $info .= "Claimant believes they are owed money: $value\n";
      unset($data[$key]);
    }
    if ($key == 'have_you_told_your_employer_and_asked_them_to_rectify_the_proble' && $value) {
      if ($value == 'Yes') {
        $h = 'has';
      }
      else {
        $h = 'has not';
      }
      $info .= "Claimant $h asked the employer for this money.\n";
      unset($data[$key]);
    }
    if ($key == 'how_much_holiday_do_you_think_you_are_owed' && $value) {
      $info .= "$value holiday days are in dispute.\n";
      unset($data[$key]);
    }
    if ($key == 'i_believe_that_my_employer_has_discriminated_against_me_because_' && $value) {
      $r = implode(', ', $value);
      $info .= "Claimant is claiming $r discrimination.\n";
      unset($data[$key]);
    }
    if ($key == 'is_this_employer_still_trading' && $value == 'No') {
      $info .= "Claimant believes employer is insolvent.\n";
      unset($data[$key]);
    }
    if ($key == 'have_you_been_employed_by_this_employer_for_a_2_years_or_more_' && $value == 'No') {
      $info .= "Claimant has NOT worked for 2 years or more for this employer.\n";
      unset($data[$key]);
    }
    
    if ($key == 'when_were_you_dismissed' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $dates[] = strtotime($date);
      $info .= 'Claimants last day of work was ' . $date . "\n";
      unset($data[$key]);
    }
    if ($key == 'when_were_you_made_redundant_optional_' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $dates[] = strtotime($date);
      $info .= 'Claimant believes they were made redundant on ' . $date . "\n";
      unset($data[$key]);
    }
    if ($key == 'when_were_you_not_paid_properly_optional_' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $dates[] = strtotime($date);
      $info .= 'Claimant believes they were last paid on ' . $date . "\n";
      unset($data[$key]);
    }
    if ($key == 'is_your_claim_against_one_person_or_a_whole_organisation_') {
      if ($value == 1) {
        $json['acas_respondenttype'] = '602700000'; // Organisation
      }
      else {
        $json['acas_respondenttype'] = '602700001'; // Person
      }
    }
  }
  if ($dates) {
    $json['acas_incidentdate'] = date('Y-m-d', max($dates));
  }
  if ($incident_type) {
    $json['acas_incidenttype'] = implode(',', $incident_type);
  }  
  if (!@$json['acas_incidenttype']) {
    //$json['acas_incidenttype'] = '602700000';
  }
  /*
  if ($data['form_type'] == 'Conciliation') {
    if (isset($json['acas_roledescription'])) {
      $info .= 'acas_roledescription=' . $json['acas_roledescription'] . "\n";
      unset($json['acas_roledescription']);
    }
    foreach($json as $key => $value) {
      if (strpos($key, 'acas_resp') !== FALSE) {
        $info .= $key . '=' . $value ."\n";
        unset($json[$key]);
      }
    }
  }
  */
  $json['acas_incidentinfo'] = urlencode($info);
  if (isset($json['acas_monetaryvalue']) && !$json['acas_monetaryvalue']) {
    $json['acas_monetaryvalue'] = '0';
  }
  if (isset($json['acas_monetaryvalue'])) {
    $json['acas_monetaryvalue'] = (int) $json['acas_monetaryvalue'];
  }
  // Now send the data
  $data_string = json_encode($json);
  $config = \Drupal::config('dynamics.settings');
  $ch = curl_init($config->get('url') . '?si_token=' . $config->get('token'));                                                                      
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");                                                                     
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                                                                      
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(                                                                          
    'Content-Type: application/json',                                                                                
    'Content-Length: ' . strlen($data_string))                                                                       
  );                                                                                                                   
  $result = curl_exec($ch);
  $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  if ($result || $http_status != 200) {
    //  If all is well, Dynamics does not return anything on succsess
    \Drupal::logger('Dynamics')->notice('Status = ' . $http_status . '<br /> JSON = <pre>' . $data_string . '</pre><hr><br /> Result = <pre>' . $result . '</pre>');
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements notification_delete_webform_submission().
 *
 * Delete a webform submission
 *
 * @param sid
 *   The webform sid to delete
 */
function notification_delete_webform_submission($sid) {
  return;
  $db = \Drupal::database();
  $db->delete('webform_submission')
    ->condition('sid', $sid, '=')
    ->execute();
  $db->delete('webform_submission_data')
    ->condition('sid', $sid, '=')
    ->execute();
}

function notification_send($data, $ref) {
  return;
  $config = \Drupal::config('gov_notify.settings');
  if ($data['acas_emailaddress']) {
    $notifyClient = new \Alphagov\Notifications\Client([
      'apiKey' => $config->get('key'),
      'httpClient' => new \Http\Adapter\Guzzle6\Client
    ]);
    try {
      $response = $notifyClient->sendEmail(
        $data['acas_emailaddress'],
        '3f2000f6-9e74-4816-ad53-829bc133c422', [
            'first_name' => $data['acas_firstname'],
            'reference'  => $ref,
            'date' => date('h:i A \o\n d F Y'),
        ],
          '',
          NULL
        );
    } catch (NotifyException $e){
      
    }
  }
}

function notification_build_field(&$entities, $field, $data) {
  $a = explode('-', $field);
  if (!isset($entities[$a[0]])) {
    return;
  }
  if ($data) {
    $entities[$a[0]]['statecode'] = 0;
    $entities[$a[0]]['statuscode'] = 1;
    if ($a[1] == 'address') {
      $entities[$a[0]]['address1_line1'] = trim($data['address']);
      $entities[$a[0]]['address1_line2'] = trim($data['address_2']);
      $entities[$a[0]]['address1_city'] = trim($data['city']);
      $entities[$a[0]]['address1_postalcode'] = trim($data['postal_code']);
    }
    else {
      if (is_string($data)) {
        $entities[$a[0]][$a[1]] = trim($data);
      }
      else {
        $entities[$a[0]][$a[1]] = implode(',', $data);
      }
    }
  }
}

function notification_build_reference_number($type = 'individual') {
  $config = \Drupal::config('acas.settings');
  $process = curl_init($config->get('notification_ref_no_ip') . '?t=' . $type . '&s=' . $_SERVER['HTTP_HOST']);
  curl_setopt($process, CURLOPT_USERPWD, $config->get('notification_ref_userpass'));
  curl_setopt($process, CURLOPT_TIMEOUT, 30);
  curl_setopt($process, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($process, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($process, CURLOPT_FOLLOWLOCATION, TRUE); 
  $number = curl_exec($process);
  curl_close($process);
  return $number;
}

final class companiesHouseApi {
  const API_ENDPOINT = 'https://api.companieshouse.gov.uk';
  private $api_key = null;
  /**
   * @param $api_key
   */
  public function __construct($api_key) {
    if (!empty($api_key)) {
      $this->api_key = $api_key;
    }
    else {
      throw new InvalidArgumentException('Please supply a valid API key');
    }
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return mixed
   */
  public function send($endpoint, array $payload = []) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $this->getRequestUrl($endpoint, $payload));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERPWD, $this->api_key . ':');
    $result = curl_exec($ch);
    curl_close($ch);
    if ($json = json_decode($result, true)) {
      $result = $json;
    }
    return $result;
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return string
   */
  private function getRequestUrl($endpoint, array $payload) {
    $payload = array_merge($payload, ['ts' => time()]);
    $qs = '?' . http_build_query($payload);
    return self::API_ENDPOINT . $endpoint . $qs;
  }
}