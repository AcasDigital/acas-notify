<?php

/**
 * @file
 * Contains notification.module.
 * Hooks & general code for the Acas notifications
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Language\Language;

/**
 * Implements hook_help().
 */
function notification_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas notification module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter
 */

function notification_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'webform_submission') !== FALSE && strpos($form_id, 'notification') !== FALSE && \Drupal::theme()->getActiveTheme()->getName() == 'acas') {
    $config = \Drupal::config('afd.settings');
    $form['#attached']['library'][] = 'notification/notification_form';
    $form['#attached']['drupalSettings']['afd'] = [
      'serial' => $config->get('serial'),
      'password' => $config->get('password'),
    ];
    if (@$form['actions']['wizard_prev']) {
      $form['back'] = $form['actions']['wizard_prev'];
      $form['back']['#value'] = 'Back';
      $form['back']['#weight'] = -10;
      $form['back']['#attributes']['class'][] = 'back--link';
      unset($form['actions']['wizard_prev']);
    }
    if (@$form['actions']['draft']) {
      $form['actions']['draft']['#attributes']['class'][] = 'btn--secondary';
    }
    if (@$form['actions']['wizard_next']) {
      $form['actions']['wizard_next']['#attributes']['class'][] = 'btn--primary';
    }
    if (@$form['actions']['submit']) {
      $form['actions']['submit']['#attributes']['class'][] = 'btn--primary';
    }
  }
}

/**
 * Implements the EC Entry Switch
 */
function notification_ec_entry_switch() {
  // See if a returning user (ec_entry cookie is set)
  // For testing, can bypass this test by adding ?nc=1 to URL
  if (isset($_COOKIE['ec_entry']) && !\Drupal::request()->query->get('nc')) {
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->join('node__field_destination', 'dest', 'dest.entity_id = nfd.nid');
    $query->fields('dest', ['field_destination_uri']);
    $query->condition('nfd.title', $_COOKIE['ec_entry'], '=');
    $result = $query->execute();
    if ($dest = $result->fetchCol()) {
      $response = new RedirectResponse($dest[0]);
      $response->send();
      return;
    }
  }
  // Set the cookie so a returning user will always be re-directed to their original path
  $cookie = time() . rand(1, 9999);
  setcookie('ec_entry', $cookie, time() + (86400 * 30), '/', '', TRUE);
  if (isset($_SERVER['HTTP_REFERER'])) {
    $referer = $_SERVER['HTTP_REFERER'];
  }else{
    $referer = 'https://' . $_SERVER['HTTP_HOST'];
  }
  // Set the values for the ec_entry node
  $values = array(
    'title' => $cookie,
    'type' => 'ec_entry',
    'language' => Language::LANGCODE_NOT_SPECIFIED,
    'uid' => 0,
    'name' => 'Anonymous',
    'field_referer' => ['uri' => $referer, 'title' => '', 'options' => []],
  );
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('ec_entry_switch.settings');
  $enabled = TRUE;
  $now = time() - strtotime("today");
  $today = date('D');
  // Test if the user should be re-directed to the new form
  if (!$config->get('enabled')) {
    $enabled = FALSE;
  }else if ($config->get('current_in_count') >= $config->get('in_count') || $config->get('current_out_count') >= $config->get('out_count')) {
    $enabled = FALSE;
  }else if ($config->get('start_time') && $config->get('end_time') && ($now < $config->get('start_time') || $now > $config->get('end_time'))) {
    $enabled = FALSE;
  }else if ($config->get('weekend') && ($today == 'Sat' || $today == 'Sun')) {
    $enabled = FALSE;
  }
  if (!$enabled) {
    // Re-direct to the old form
    $values['field_destination'] = ['uri' => $config->get('old_url'), 'title' => '', 'options' => []];
    $node = \Drupal::entityTypeManager()->getStorage('node')->create($values);
    $node->save();
    $response = new RedirectResponse($config->get('old_url'));
  }else{
    // Re-direct to the new form
    $values['field_destination'] = ['uri' => $config->get('new_url'), 'title' => '', 'options' => []];
    $node = \Drupal::entityTypeManager()->getStorage('node')->create($values);
    $node->save();
    // Update the in count
    $config->set('current_in_count', $config->get('current_in_count') + 1);
    $config->save();
    $response = new RedirectResponse($config->get('new_url'));
  }
  // Send the re-direct response
  $response->send();
}

function notification_cron() {
  if (date('H') == '03') {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('ec_entry_switch.settings');
    $config->set('current_in_count', 0);
    $config->set('current_out_count', 0);
    $config->save();
  }
}

function notification_company_house($employer) {
  $config = \Drupal::config('companies_house.settings');
  $api = new companiesHouseApi($config->get('api'));
  $response = $api->send('/search/companies', ['q' => $employer]);
  $return = [];
  foreach($response['items'] as $item) {
    if ($item['company_status'] == 'active') {
      $return[] = $item;
    }
  }
  return $return;
}

function notification_confirmation($webform, $webform_submission_id) {
  if (strpos($webform, 'notification') !== FALSE && $webform_submission = WebformSubmission::load($webform_submission_id)) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('ec_entry_switch.settings');
    $config->set('current_out_count', $config->get('current_out_count') + 1);
    $config->save();
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->fields('nfd', ['nid']);
    $query->condition('nfd.title', @$_COOKIE['ec_entry'], '=');
    $result = $query->execute();
    if ($nid = $result->fetchCol()) {
      $node = \Drupal\node\Entity\Node::load($nid[0]);
      $node->field_end->value = date('Y-m-d\TH:i:s', time() - date('Z'));
      $node->save();
    }
    $ref = notification_build_reference_number();
    /*
    $data = $webform_submission->getData();
    $config = \Drupal::config('dynamics.settings');
    $client = \AlexaCRM\WebAPI\ClientFactory::createOnlineClient(
      $config->get('organization_uri'),
      $config->get('application_id'),
      $config->get('application_secret')
    );
    $entities = [
      'contact' => new \AlexaCRM\Xrm\Entity('contact'),
      'account' => new \AlexaCRM\Xrm\Entity('account'),
      'representative' => new \AlexaCRM\Xrm\Entity('contact'),
      'employer' => new \AlexaCRM\Xrm\Entity('contact'),
      'case' => new \AlexaCRM\Xrm\Entity('incident'),
    ];
    foreach($data as $field => $value) {
      notification_build_field($entities, $field, $value);
    }
    $accountId = $client->Create($entities['account']);
    $contactId = $client->Create($entities['contact']);
    $associate = [new \AlexaCRM\Xrm\EntityReference( 'contact', $contactId )];
    if (@$entities['representative']['statuscode']) {
      $representativeId = $client->Create($entities['representative']);
      $associate[] = new \AlexaCRM\Xrm\EntityReference( 'contact', $representativeId );
    }
    if (@$entities['employer']['statuscode']) {
      $employerId = $client->Create($entities['employer']);
      $associate[] = new \AlexaCRM\Xrm\EntityReference( 'contact', $employerId );
    }
    $entities['case']['title'] = $entities['contact']['firstname'] . ' ' . $entities['contact']['lastname'];
    $entities['case']['customerid'] = new AlexaCRM\Xrm\EntityReference( 'account', $accountId );
    $entities['case']['ticketnumber'] = $ref;
    $caseId = $client->Create($entities['case']);
    $client->Associate(
      'account',
      $accountId,
      new \AlexaCRM\Xrm\Relationship( 'contact_customer_accounts' ), $associate
    );
    */
  }
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $node = \Drupal\node\Entity\Node::load(94);
  $view = $view_builder->view($node, 'full');
  $html = drupal_render($view);
  $html = str_replace('[REFERENCE]', $ref, $html);
  $html = str_replace('[DATE]', date('h:i A \o\n d F Y'), $html);
  $a = explode('</h2>', $html, 2);
  $b = explode('<h2>', $a[0]);
  $html = $b[0] . '<h1 class="thank-you-page-header">Thank you!</h1>' . $a[1];
  return $html;
}

function notification_build_field(&$entities, $field, $data) {
  $a = explode('-', $field);
  if (!isset($entities[$a[0]])) {
    return;
  }
  if ($data) {
    $entities[$a[0]]['statecode'] = 0;
    $entities[$a[0]]['statuscode'] = 1;
    if ($a[1] == 'address') {
      $entities[$a[0]]['address1_line1'] = trim($data['address']);
      $entities[$a[0]]['address1_line2'] = trim($data['address_2']);
      $entities[$a[0]]['address1_city'] = trim($data['city']);
      $entities[$a[0]]['address1_postalcode'] = trim($data['postal_code']);
    }else{
      if (is_string($data)) {
        $entities[$a[0]][$a[1]] = trim($data);
      }else{
        $entities[$a[0]][$a[1]] = implode(',', $data);
      }
    }
  }
}

function notification_build_reference_number() {
  $ref = str_pad(rand(20000, 99999), 8, '0', STR_PAD_LEFT);
  $sub = rand(10, 99);
  return $ref . '/' . $sub;
}

final class companiesHouseApi {
  const API_ENDPOINT = 'https://api.companieshouse.gov.uk';
  private $api_key = null;
  /**
   * @param $api_key
   */
  public function __construct($api_key) {
    if (!empty($api_key)) {
      $this->api_key = $api_key;
    } else {
      throw new InvalidArgumentException('Please supply a valid API key');
    }
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return mixed
   */
  public function send($endpoint, array $payload = []) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $this->getRequestUrl($endpoint, $payload));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERPWD, $this->api_key . ':');
    $result = curl_exec($ch);
    curl_close($ch);
    if ($json = json_decode($result, true)) {
      $result = $json;
    }
    return $result;
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return string
   */
  private function getRequestUrl($endpoint, array $payload) {
    $payload = array_merge($payload, ['ts' => time()]);
    $qs = '?' . http_build_query($payload);
    return self::API_ENDPOINT . $endpoint . $qs;
  }
}