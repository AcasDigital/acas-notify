<?php

/**
 * @file
 * Contains notification.module.
 * Hooks & general code for the Acas notifications
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Language\Language;

/**
 * Implements hook_help().
 */
function notification_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas notification module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter
 */

function notification_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'webform_submission') !== FALSE && strpos($form_id, 'notification') !== FALSE && \Drupal::theme()->getActiveTheme()->getName() == 'acas') {
    $config = \Drupal::config('afd.settings');
    $form['#attached']['library'][] = 'notification/notification_form';
    $form['#attached']['drupalSettings']['afd'] = [
      'serial' => $config->get('serial'),
      'password' => $config->get('password'),
    ];
    if (@$form['actions']['wizard_prev']) {
      $form['back'] = $form['actions']['wizard_prev'];
      $form['back']['#value'] = 'Back';
      $form['back']['#weight'] = -10;
    }
  }
}

function notification_ec_entry_switch() {
  if (isset($_COOKIE['ec_entry']) && !\Drupal::request()->query->get('nc')) {
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->join('node__field_destination', 'dest', 'dest.entity_id = nfd.nid');
    $query->fields('dest', ['field_destination_uri']);
    $query->condition('nfd.title', $_COOKIE['ec_entry'], '=');
    $result = $query->execute();
    if ($dest = $result->fetchCol()) {
      $response = new RedirectResponse($dest[0]);
      $response->send();
      return;
    }
  }
  setcookie('ec_entry', $_SERVER['REMOTE_ADDR'], time() + (86400 * 30), '/', '', TRUE);
  if (isset($_SERVER['HTTP_REFERER'])) {
    $referer = $_SERVER['HTTP_REFERER'];
  }else{
    $referer = 'https://' . $_SERVER['HTTP_HOST'];
  }
  $values = array(
    'title' => $_SERVER['REMOTE_ADDR'],
    'type' => 'ec_entry',
    'language' => Language::LANGCODE_NOT_SPECIFIED,
    'uid' => 0,
    'name' => 'Anonymous',
    'field_referer' => ['uri' => $referer, 'title' => '', 'options' => []],
  );
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('ec_entry_switch.settings');
  $enabled = TRUE;
  $now = time() - strtotime("today");
  $today = date('D');
  if (!$config->get('enabled')) {
    $enabled = FALSE;
  }else if ($config->get('current_in_count') >= $config->get('in_count') || $config->get('current_out_count') >= $config->get('out_count')) {
    $enabled = FALSE;
  }else if ($config->get('start_time') && $config->get('end_time') && ($now < $config->get('start_time') || $now > $config->get('end_time'))) {
    $enabled = FALSE;
  }else if ($config->get('weekend') && ($today == 'Sat' || $today == 'Sun')) {
    $enabled = FALSE;
  }
  if (!$enabled) {
    $values['field_destination'] = ['uri' => $config->get('old_url'), 'title' => '', 'options' => []];
    $node = \Drupal::entityTypeManager()->getStorage('node')->create($values);
    $node->save();
    $response = new RedirectResponse($config->get('old_url'));
  }else{
    $values['field_destination'] = ['uri' => $config->get('new_url'), 'title' => '', 'options' => []];
    $node = \Drupal::entityTypeManager()->getStorage('node')->create($values);
    $node->save();
    $config->set('current_in_count', $config->get('current_in_count') + 1);
    $config->save();
    $response = new RedirectResponse($config->get('new_url'));
  }
  $response->send();
}

function notification_cron() {
  if (date('H') == '03') {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('ec_entry_switch.settings');
    $config->set('current_in_count', 0);
    $config->set('current_out_count', 0);
    $config->save();
  }
}

function notification_company_house($employer) {
  $config = \Drupal::config('companies_house.settings');
  $api = new companiesHouseApi($config->get('api'));
  $response = $api->send('/search/companies', ['q' => $employer]);
  $return = [];
  foreach($response['items'] as $item) {
    if ($item['company_status'] == 'active') {
      $return[] = $item;
    }
  }
  return $return;
}

function notification_confirmation($webform, $webform_submission_id) {
  if (strpos($webform, 'notification') !== FALSE && $webform_submission = WebformSubmission::load($webform_submission_id)) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('ec_entry_switch.settings');
    $config->set('current_out_count', $config->get('current_out_count') + 1);
    $config->save();
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->fields('nfd', ['nid']);
    $query->condition('nfd.title', @$_COOKIE['ec_entry'], '=');
    $result = $query->execute();
    if ($nid = $result->fetchCol()) {
      $node = \Drupal\node\Entity\Node::load($nid[0]);
      $node->field_end->value = date('Y-m-d\TH:i:s', time() - date('Z'));
      $node->save();
    }
    $ref = notification_build_reference_number();
    /*
    $data = $webform_submission->getData();
    $config = \Drupal::config('dynamics.settings');
    $client = \AlexaCRM\WebAPI\ClientFactory::createOnlineClient(
      $config->get('organization_uri'),
      $config->get('application_id'),
      $config->get('application_secret')
    );
    $entities = [
      'contact' => new \AlexaCRM\Xrm\Entity('contact'),
      'account' => new \AlexaCRM\Xrm\Entity('account'),
      'representative' => new \AlexaCRM\Xrm\Entity('contact'),
      'employer' => new \AlexaCRM\Xrm\Entity('contact'),
      'case' => new \AlexaCRM\Xrm\Entity('incident'),
    ];
    foreach($data as $field => $value) {
      notification_build_field($entities, $field, $value);
    }
    $accountId = $client->Create($entities['account']);
    $contactId = $client->Create($entities['contact']);
    $associate = [new \AlexaCRM\Xrm\EntityReference( 'contact', $contactId )];
    if (@$entities['representative']['statuscode']) {
      $representativeId = $client->Create($entities['representative']);
      $associate[] = new \AlexaCRM\Xrm\EntityReference( 'contact', $representativeId );
    }
    if (@$entities['employer']['statuscode']) {
      $employerId = $client->Create($entities['employer']);
      $associate[] = new \AlexaCRM\Xrm\EntityReference( 'contact', $employerId );
    }
    $entities['case']['title'] = $entities['contact']['firstname'] . ' ' . $entities['contact']['lastname'];
    $entities['case']['customerid'] = new AlexaCRM\Xrm\EntityReference( 'account', $accountId );
    $entities['case']['ticketnumber'] = $ref;
    $caseId = $client->Create($entities['case']);
    $client->Associate(
      'account',
      $accountId,
      new \AlexaCRM\Xrm\Relationship( 'contact_customer_accounts' ), $associate
    );
    */
  }
  $return = '<p>&nbsp;</p><h1>Thank you!</h1>
  <p>You have now submitted your early conciliation notification to Acas.</p>
  <p class="reference">Your case reference number is <span class="reference_no">' . $ref .'</span>, submitted at ' . date('h:i A \o\n d F Y') . '.</p>
  <h3>You will need your case reference number when you contact us.</h3>
  <p>You will shortly receive an email that contains:</p>
  <ul>
    <li>a summary of your case</li>
    <li>your case reference number</li>
    <li>a confirmed date and time for your first call with Acas</li>
  </ul>
  <p>Check your \'spam\' folder to make sure this email hasn\'t been sent there.</p>
  <p>If you didn\'t give an email address, you will receive confirmation by post.</p>
  <p>Please note that your case reference number is not the same as the certificate number you need if you choose to go to court.</p>
  <h3>What happens next</h3>
  <p>We aim to contact you within 5 working days. We\'ll contact you the way you told us and aim to do so on one of the days and times you have said are good for you. We\'ll ask some basic questions about your claim and explain the process of early conciliation. This usually takes about 10 minutes.</p>
  <h3>What Acas does</h3>
  <p>If you are happy to take part in early conciliation, someone who works at Acas, called a \'conciliator\', will talk to you about the details of your case. They should be able to tell you how strong your case is, but their main role is to advise you and your employer on possible solutions.</p>
  <p>Your Acas conciliator will also want to speak to your employer, to see if they are interested in trying to resolve things instead of going to court. The conciliator will only discuss things with your employer if you agree.</p>
  <p>Acas conciliators do not take sides or pass judgement.</p>
  <p>We recommend that you get legal advice to help your claim.</p>
  <h3>How long it takes</h3>
  <p>Early conciliation usually lasts a month, but each case is different.</p>
  <h3>Your personal information</h3>
  <p>Early conciliation is confidential and we will not pass on information you don\'t want to be shared.</p>
  <p>Any personal information you provide us will be held securely and your personal information will not be sold or traded to third parties. Find out how we use and protect your <a href="http://www.acas.org.uk/index.aspx?articleid=1922" target="_blank">personal information.</a></p>
  <h3>If conciliation fails</h3>
  <p>If we cannot help you and your employer resolve the dispute, we issue the certificate that you need to lodge an employment tribunal claim. You will have at least one calendar month after early conciliation in which to do this.</p>
  <p>Other sources of advice <a href="https://www.citizensadvice.org.uk/law-and-courts/discrimination" target="_blank">www.citizensadvice.org.uk/law-and-courts/discrimination</a></p>';

  return $return;
}

function notification_build_field(&$entities, $field, $data) {
  $a = explode('-', $field);
  if (!isset($entities[$a[0]])) {
    return;
  }
  if ($data) {
    $entities[$a[0]]['statecode'] = 0;
    $entities[$a[0]]['statuscode'] = 1;
    if ($a[1] == 'address') {
      $entities[$a[0]]['address1_line1'] = trim($data['address']);
      $entities[$a[0]]['address1_line2'] = trim($data['address_2']);
      $entities[$a[0]]['address1_city'] = trim($data['city']);
      $entities[$a[0]]['address1_postalcode'] = trim($data['postal_code']);
    }else{
      if (is_string($data)) {
        $entities[$a[0]][$a[1]] = trim($data);
      }else{
        $entities[$a[0]][$a[1]] = implode(',', $data);
      }
    }
  }
}

function notification_build_reference_number() {
  $ref = str_pad(rand(20000, 99999), 8, '0', STR_PAD_LEFT);
  $sub = rand(10, 99);
  return $ref . '/' . $sub;
}

final class companiesHouseApi {
  const API_ENDPOINT = 'https://api.companieshouse.gov.uk';
  private $api_key = null;
  /**
   * @param $api_key
   */
  public function __construct($api_key) {
    if (!empty($api_key)) {
      $this->api_key = $api_key;
    } else {
      throw new InvalidArgumentException('Please supply a valid API key');
    }
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return mixed
   */
  public function send($endpoint, array $payload = []) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $this->getRequestUrl($endpoint, $payload));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERPWD, $this->api_key . ':');
    $result = curl_exec($ch);
    curl_close($ch);
    if ($json = json_decode($result, true)) {
      $result = $json;
    }
    return $result;
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return string
   */
  private function getRequestUrl($endpoint, array $payload) {
    $payload = array_merge($payload, ['ts' => time()]);
    $qs = '?' . http_build_query($payload);
    return self::API_ENDPOINT . $endpoint . $qs;
  }
}