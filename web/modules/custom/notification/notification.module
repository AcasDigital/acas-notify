<?php

/**
 * @file
 * Contains notification.module.
 * Hooks & general code for the Acas notifications
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Language\Language;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_help().
 */
function notification_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas notification module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view().
 */
function notification_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full' && $entity instanceof \Drupal\node\NodeInterface) {
    if (isset($_COOKIE['webform_preview'])) {
      unset($_COOKIE['webform_preview']);
      setcookie('webform_preview', NULL, time()-3600, '/');
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function notification_page_attachments_alter(&$build) {
  if (isset($_COOKIE['no_js'])) {
    $build['#attached']['library'][] = 'notification/no_js';
  }
}

/**
 * Implements hook_webform_submission_form_alter
 */
function notification_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['elements']['form_type']['#value'])) {
    // Either a Notification or Conciliation form
    if (preg_match('/MSIE\s(?P<v>\d+)/i', $_SERVER['HTTP_USER_AGENT'], $B) && $B['v'] <= 8) {
      // Browsers IE 8 and below
      $response = new RedirectResponse('/ie8');
      $response->send();
      return;
    }
    $config = \Drupal::config('notification.afd');
    $form['#attached']['library'][] = 'notification/notification_form';
    $form['#attached']['drupalSettings']['afd'] = [
      'url' => $config->get('url'),
      'token' => $config->get('token'),
    ];
    if (isset($form['actions']['wizard_prev'])) {
      if (!isset($_COOKIE['webform_preview'])) {
        $form['back'] = $form['actions']['wizard_prev'];
        $form['back']['#value'] = 'Back';
        $form['back']['#weight'] = -10;
        $form['back']['#attributes']['class'][] = 'back--link';
      }
      if (!isset($_COOKIE['no_js'])) {
        unset($form['actions']['wizard_prev']);
      }
    }
    if ($json = \Drupal::request()->query->get('json')) {
      setcookie('json', '1', NULL, '/');
    }
    elseif (isset($_COOKIE['json'])) {
      setcookie('json', NULL, time()-3600, '/');
      unset($_COOKIE['json']);
    }
    if (isset($form['actions']['preview_prev'])) {
      //unset($form['actions']['preview_prev']);
    }
    if (isset($form['actions']['draft'])) {
      $form['actions']['draft']['#attributes']['class'][] = 'btn-secondary';
    }
    if (isset($form['actions']['wizard_next'])) {
      $form['actions']['wizard_next']['#attributes']['class'][] = 'btn-primary';
    }
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#attributes']['class'][] = 'btn-primary';
    }
    $current_page = $form_state->get('current_page');
    $element_key = $form_state->getTriggeringElement();
    if (isset($_COOKIE['webform_preview']) && $_COOKIE['webform_preview'] == $form['elements']['form_type']['#value']) {
      $pages = $form_state->get('pages');
      $all_keys = array_keys($pages);
      $goto_destination_page_index = array_search('webform_preview', $all_keys);
      if($goto_destination_page_index > 0){
        $form_state->set('current_page', $all_keys[$goto_destination_page_index -1]);
      }
    }
    else {
      if ($current_page == 'webform_preview' && !isset($_COOKIE['no_js'])) {
        setcookie('webform_preview', $form['elements']['form_type']['#value'], NULL, '/');
      }
    }
    if ($element_key && strpos($element_key['#id'], 'edit-actions-preview-next') !== FALSE) {
      //setcookie('webform_preview', $form['elements']['form_type']['#value'], NULL, '/');
    }
    if ($acas_ecref = \Drupal::request()->query->get('acas_ecref')) {
      $form['elements']['acas_ecref']['#value'] = $acas_ecref;
      $_SESSION['acas_ecref'] = $acas_ecref;
      // Load form1 data to see if have email or phone
      $db = \Drupal::database();
      $result = $db->select('acas_ecrefno', 'a')
        ->fields('a', ['sid1'])
        ->condition('a.reference_no', $acas_ecref, '=')
        ->execute()
        ->fetchAll();
      if (count($result) && $wfs = WebformSubmission::load($result[0]->sid1)) {
        $form1_data = $wfs->getData();
        //$form1_data['acas_emailaddress'] = '';
        //$form1_data['acas_maincontactnumber'] = '';
        if (!$form1_data['acas_emailaddress'] && !$form1_data['acas_maincontactnumber']) {
          $form['elements']['page1']['introduction_to_form']['#markup'] = str_replace('[LETTER]', 'Your claim reference number is <strong>' . $acas_ecref . '</strong>, submitted at <strong>' . date('h:i A \o\n d F Y') . '</strong><br /><br />You did not give us an email address or phone number. We will send you a letter confirming your claim reference number.', $form['elements']['page1']['introduction_to_form']['#markup']);
        }
        else {
          $form['elements']['page1']['introduction_to_form']['#markup'] = str_replace('[LETTER]', '', $form['elements']['page1']['introduction_to_form']['#markup']);
        }
      }
      else {
        $form['elements']['page1']['introduction_to_form']['#markup'] = str_replace('[LETTER]', '', $form['elements']['page1']['introduction_to_form']['#markup']);
      }
    }
    if ($form['elements']['form_type']['#value'] == 'GroupConciliation') {
      if ($input = $form_state->getUserInput()) {
        if ($input['is_this_claim_part_of_an_existing_group_claim_'] == '2') {
          $pages = $form_state->get('pages');
          $all_keys = array_keys($pages);
          $goto_destination_page_index = array_search('webform_preview', $all_keys);
          if($goto_destination_page_index > 0){
            $form_state->set('current_page', $all_keys[$goto_destination_page_index -1]);
          }
        }
        elseif ($input['is_this_claim_part_of_an_existing_group_claim_'] == '1') {
          setcookie('webform_preview', NULL, time()-3600, '/');
          unset($_COOKIE['webform_preview']);
        }
      }
    }
  }
  if ($form_id == 'webform_submission_notification_form_add_form' && !isset($_COOKIE['ec_entry_details'])) {
    $current_page = $form_state->get('current_page');
    if ($current_page == 'page1') {
      $url = 'https://' . $_SERVER['HTTP_HOST'];
      $cookie = ['referrer' => $url, 'destination' => $url, 'entry' => time()];
      setcookie('ec_entry_details', json_encode($cookie), time() + (86400 * 30), '/', '', TRUE);
    }
  }
  else if ($form_id == 'webform_submission_group_notification_add_form') {
    $current_page = $form_state->get('current_page');
    if ($current_page == 'page1') {
      $form['#validate'][] = 'notification_group_claimants_upload_validate';
    }
    if ($current_page != 'page2') {
      // Prevent imported claimants count on every page
      drupal_get_messages();
    }
  }
  else if ($form_id == 'webform_submission_group_notification_conciliation_add_form') {
    $form['#attached']['drupalSettings']['current_group_number'] = notification_get_current_reference_number('group');
  }
  else if ($form_id == 'webform_submission_notification_dispute_start_add_form') {
    $current_page = $form_state->get('current_page');
    if ($current_page == 'page1') {
      if (isset($_POST['is_this_claim_part_of_an_existing_group_claim_optional_']) && $_POST['is_this_claim_part_of_an_existing_group_claim_optional_'] == 2) {
        $pages = $form_state->get('pages');
        $all_keys = array_keys($pages);
        $goto_destination_page_index = array_search('webform_preview', $all_keys);
        if($goto_destination_page_index > 0){
          $form_state->set('current_page', $all_keys[$goto_destination_page_index -1]);
        }
      }else {
        $form['#attached']['drupalSettings']['current_reference_number'] = notification_get_current_reference_number('individual');
      }
    }
  }
}

/**
 * Implements notification_preprocess_input().
 *
 * Adds Google Analytics attributes to radios & checkboxes
 *
 */
function notification_preprocess_input(&$variables) {
  if ($variables['element']['#attributes']['type'] == 'radio') {
    $variables['element']['#attributes']['ga-on'] = 'click';
    $variables['element']['#attributes']['ga-event-category'] = $variables['element']['#attributes']['name'];
    $variables['element']['#attributes']['ga-event-action'] = $variables['element']['#attributes']['value'];
  }
  if ($variables['element']['#attributes']['type'] == 'checkbox') {
    $variables['element']['#attributes']['ga-on'] = 'click';
    $a = explode('_[', $variables['element']['#attributes']['name']);
    $variables['element']['#attributes']['ga-event-category'] = $a[0];
    $variables['element']['#attributes']['ga-event-action'] = $variables['element']['#attributes']['value'];
  }
}

/**
 * Implements notification_download_pdf_build_html().
 *
 * Builds the html for the pdf download
 *
 */
function notification_download_pdf_build_html($sid1 = NULL, $sid2 = NULL) {
  $ecref = \Drupal::request()->query->get('ecref');
  $html = '';
  if ($sid1) {
    $html .= '<div class="notify-number">Your claim reference number is ' . $ecref . ', submitted at ' . date('h:i A \o\n d F Y') . '</div>';
    if (!$wfs = WebformSubmission::load($sid1)) {
      $html .= '<h2>Notification data has expired</h2>';
    }
    else {
      $form_data = $wfs->getData();
      $html .= '<h2>Notification</h2>';
      $html .= '<div class="panel-title">Your details</div><div class="panel-body">';
      if ($form_data['acas_firstname']) {
        $html .= '<div class="form-item"><label class="control-label">First name</label>' . $form_data['acas_firstname'] . '</div>';
      }
      if ($form_data['acas_surname']) {
        $html .= '<div class="form-item"><label class="control-label">Last name</label>' . $form_data['acas_surname'] . '</div>';
      }
      if ($form_data['acas_maincontactnumber']) {
        $html .= '<div class="form-item"><label class="control-label">Your phone number</label>' . $form_data['acas_maincontactnumber'] . '</div>';
      }
      if ($form_data['acas_accessibilityneeds']) {
        $html .= '<div class="form-item"><label class="control-label">How you prefer to communicate with us</label>' . $form_data['acas_accessibilityneeds'] . '</div>';
      }
      if ($form_data['acas_emailaddress']) {
        $html .= '<div class="form-item"><label class="control-label">Your email address</label>' . $form_data['acas_emailaddress'] . '</div>';
      }
      if ($form_data['claimant_address']) {
        $html .= '<div class="form-item"><label class="control-label">Address</label>';
        foreach($form_data['claimant_address'] as $add) {
          if ($add) {
            $html .= $add . '<br />';
          }
        }
        $html .= '</div>';
      }
      $html .= '</div>';
      if ($form_data['is_there_someone_helping_you_through_this_process_optional_'] > 1) {
        $html .= '<div class="panel-title">Your help</div><div class="panel-body">';
        $html .= '<div class="form-item"><label class="control-label">Who is helping you</label>';
        if ($form_data['is_there_someone_helping_you_through_this_process_optional_'] == 2) {
          $html .= 'A solicitor is helping me</div>';
        }
        if ($form_data['is_there_someone_helping_you_through_this_process_optional_'] == 3) {
          $html .= 'A trade union official is helping me</div>';
        }
         if ($form_data['is_there_someone_helping_you_through_this_process_optional_'] == 4) {
          $html .= $form_data['acas_relationtoclaimant'] . '</div>';
        }
        if ($form_data['acas_claimreporgname']) {
          $html .= '<div class="form-item"><label class="control-label">They work for</label>' . $form_data['acas_claimreporgname'] . '</div>';
        }
        if ($form_data['acas_claimrepfirstname']) {
          $html .= '<div class="form-item"><label class="control-label">First name</label>' . $form_data['acas_claimrepfirstname'] . '</div>';
        }
        if ($form_data['acas_claimrepsurname']) {
          $html .= '<div class="form-item"><label class="control-label">Last name</label>' . $form_data['acas_claimrepsurname'] . '</div>';
        }
        if ($form_data['acas_claimrepemailaddress']) {
          $html .= '<div class="form-item"><label class="control-label">Email address</label>' . $form_data['acas_claimrepemailaddress'] . '</div>';
        }
        if ($form_data['acas_claimrepmainphoneno']) {
          $html .= '<div class="form-item"><label class="control-label">Telephone number</label>' . $form_data['acas_claimrepmainphoneno']['phone'];
          if ($form_data['acas_claimrepmainphoneno']['ext']) {
            $html .= 'x' . $form_data['acas_claimrepmainphoneno']['ext'];
          }
          $html .= '</div>';
        }
         if ($form_data['representative_address']) {
          $html .= '<div class="form-item"><label class="control-label">Address</label>';
          foreach($form_data['representative_address'] as $add) {
            if ($add) {
              $html .= $add . '<br />';
            }
          }
          $html .= '</div>';
        }
        $html .= '</div>';
        $html .= '<p style="page-break-before: always">';
      }
      $html .= '<div class="panel-title">Your claim is against</div><div class="panel-body">';
      if ($form_data['is_your_claim_against_one_person_or_a_whole_organisation_']) {
        $html .= '<div class="form-item"><label class="control-label">An organisation or an individual</label>';
        if ($form_data['is_your_claim_against_one_person_or_a_whole_organisation_'] == 1) {
          $html .= 'A company or organisation</div>';
          $html .= '<div class="form-item"><label class="control-label">Legal name of your employer</label>' . $form_data['acas_resporganisationname'] . '</div>';
        }
        else {
          $html .= 'An individual</div>';
          $html .= '<div class="form-item"><label class="control-label">First name</label>' . $form_data['acas_respfirstname'] . '</div>';
          $html .= '<div class="form-item"><label class="control-label">Last name</label>' . $form_data['acas_respsurname'] . '</div>';
        }
      }
      if ($form_data['respondant_address']) {
        $html .= '<div class="form-item"><label class="control-label">Address</label>';
        foreach($form_data['respondant_address'] as $add) {
          if ($add) {
            $html .= $add . '<br />';
          }
        }
        $html .= '</div>';
      }
      $html .= '</div>';
    }
  }
  if ($sid2) {
    if (!$wfs = WebformSubmission::load($sid2)) {
      $html .= '<h2>Conciliation data has expired</h2>';
    }
    else {
      if ($sid1) {
        $html .= '<p style="page-break-before: always">';
      }
      $html .= '<h2>Conciliation</h2>';
      $form_data = $wfs->getData();
      if ($form_data['problem_several_colleagues']) {
        $html .= '<div class="form-item"><label class="control-label">Are you one of several employees?</label>';
        if ($form_data['problem_several_colleagues'] == 1) {
          $html .= 'No, I don’t know of anyone else who is part of the same dispute</div>';
        }
        if ($form_data['problem_several_colleagues'] == 2) {
          $html .= 'Yes, I’m one of several employees in the same dispute</div>';
        }
        if ($form_data['problem_several_colleagues'] == 3) {
          $html .= 'I’m not sure</div>';
        }
        $html .= '</div>';
      }
      if ($form_data['is_this_employer_still_trading']) {
        $html .= '<div class="form-item"><label class="control-label">Is your employer still in business?</label>' . $form_data['is_this_employer_still_trading'] . '</div>';
      }
      if ($form_data['do_you_believe_you_have_been_unfairly_dismissed_or_made_redundan'] > 1) {
        if ($form_data['have_you_been_employed_by_this_employer_for_a_2_years_or_more_']) {
          $html .= '<div class="form-item"><label class="control-label">Have you worked for this employer for 2 years or more?</label>' . $form_data['have_you_been_employed_by_this_employer_for_a_2_years_or_more_'] . '</div>';
        }
        if ($form_data['when_were_you_dismissed']) {
          $html .= '<div class="form-item"><label class="control-label">Your last day of work</label>' . str_pad($form_data['when_were_you_dismissed']['day'], 2, '0', STR_PAD_LEFT) . '/' . str_pad($form_data['when_were_you_dismissed']['month'], 2, '0', STR_PAD_LEFT) . '/' . $form_data['when_were_you_dismissed']['year'] . '</div>' ;
        }
      }
      if ($form_data['is_your_dispute_about_your_selection_for_redundancy_']) {
        $html .= '<div class="form-item"><label class="control-label">Is your dispute about why you were selected for redundancy?</label>' . $form_data['is_your_dispute_about_your_selection_for_redundancy_'] . '</div>';
      }
      if ($form_data['is_your_dispute_about_redundancy_pay_optional_']) {
        $html .= '<div class="form-item"><label class="control-label">Is your dispute about redundancy pay?</label>';
        if ($form_data['is_your_dispute_about_redundancy_pay_optional_'] == 1) {
          $html .= 'No</div>';
        }
        else {
          $html .= 'Yes</div>';
          if ($form_data['how_much_redundancy_pay_do_you_think_you_are_owed_optional_']) {
            $html .= '<div class="form-item"><label class="control-label">How much redundancy pay are you owed?</label>&pound;' . $form_data['how_much_redundancy_pay_do_you_think_you_are_owed_optional_'] . '</div>';
          }
        }
        $html .= '</div>';
      }
      if ($form_data['did_you_have_a_meeting_with_your_employer_before_you_were_dismis']) {
        $html .= '<div class="form-item"><label class="control-label">Did you have a meeting with your employer before you were dismissed?</label>' . $form_data['did_you_have_a_meeting_with_your_employer_before_you_were_dismis'] . '</div>';
      }
      if ($form_data['did_you_meet_with_your_employer_after_you_were_dismissed_']) {
        $html .= '<div class="form-item"><label class="control-label">Did you have a meeting with your employer after you were dismissed?</label>' . $form_data['did_you_meet_with_your_employer_after_you_were_dismissed_'] . '</div>';
      }
      if ($form_data['did_your_employer_given_any_explanation_optional_']) {
        $html .= '<div class="form-item"><label class="control-label">What did they say?</label>' . $form_data['did_your_employer_given_any_explanation_optional_'] . '</div>';
      }
      if ($form_data['do_you_think_you_are_owed_wages']) {
        $html .= '<div class="form-item"><label class="control-label">Are you owed wages or holiday pay?</label>Yes</div>';
        if ($form_data['acas_monetaryvalue']) {
           $html .= '<div class="form-item"><label class="control-label">I am owed</label>&pound;' . $form_data['acas_monetaryvalue'] . '</div>';
        }
        if ($form_data['when_were_you_not_paid_properly_optional_']) {
          $html .= '<div class="form-item"><label class="control-label">When did you have this problem with your pay?</label>' . str_pad($form_data['when_were_you_not_paid_properly_optional_']['day'], 2, '0', STR_PAD_LEFT) . '/' . str_pad($form_data['when_were_you_not_paid_properly_optional_']['month'], 2, '0', STR_PAD_LEFT) . '/' . $form_data['when_were_you_not_paid_properly_optional_']['year'] . '</div>' ;
        }
        if ($form_data['explain_why_you_think_you_are_owed_wages_optional_']) {
           $html .= '<div class="form-item"><label class="control-label">Why do you think you are owed this money?</label>' . $form_data['explain_why_you_think_you_are_owed_wages_optional_'] . '</div>';
        }
      }
      if ($form_data['do_you_believe_that_you_have_been_discriminated_against']) {
        $html .= '<div class="form-item"><label class="control-label">Is your claim about discrimination at work?</label>Yes</div>';
        if ($form_data['i_believe_that_my_employer_has_discriminated_against_me_because_']) {
          $html .= '<div class="form-item"><label class="control-label">I believe that I\'ve been discriminated against at work because of my:</label>';
          foreach($form_data['i_believe_that_my_employer_has_discriminated_against_me_because_'] as $r) {
            if ($r) {
              $html .= $r . '<br />';
            }
          }
          $html .= '</div>';
        }
      }
      if ($form_data['are_you_currently_employed_by_the_employer_']) {
        $html .= '<div class="form-item"><label class="control-label">Are you currently employed by this employer?</label>' . $form_data['are_you_currently_employed_by_the_employer_'] . '</div>';
      }
      if ($form_data['do_you_have_a_written_contract_of_employment_with_this_employer_']) {
        $html .= '<div class="form-item"><label class="control-label">Do you or did you have a written contract of employment with this employer?</label>' . $form_data['do_you_have_a_written_contract_of_employment_with_this_employer_'] . '</div>';
      }
      if ($form_data['have_you_asked_your_employer_in_writing_to_resolve_this_dispute_']) {
        $html .= '<div class="form-item"><label class="control-label">Have you discussed the dispute with your employer?</label>';
        if ($form_data['have_you_asked_your_employer_in_writing_to_resolve_this_dispute_'] == 1) {
          $html .= 'No';
        }
        if ($form_data['have_you_asked_your_employer_in_writing_to_resolve_this_dispute_'] == 2) {
          $html .= 'Yes, and they have finished looking into it';
        }
        if ($form_data['have_you_asked_your_employer_in_writing_to_resolve_this_dispute_'] == 3) {
          $html .= 'Yes, and they are looking into it';
        }
        $html .= '</div>';
      }
      if ($form_data['what_did_your_employer_decide_about_your_dispute_optional_']) {
        $html .= '<div class="form-item"><label class="control-label">What did they say to you about your dispute after looking into it?</label>' . $form_data['what_did_your_employer_decide_about_your_dispute_optional_'] . '</div>';
      }
      if ($form_data['is_there_anything_else_you_want_to_tell_us_optional_']) {
        $html .= '<div class="form-item"><label class="control-label>"Is there anything else you want to tell us about your dispute?</label>' . $form_data['is_there_anything_else_you_want_to_tell_us_optional_'] . '</div>';
      }
      if ($form_data['acas_goodtimetocall']) {
        $html .= '<div class="form-item"><label class="control-label">When is a good time to call?</label>' . $form_data['acas_goodtimetocall'] . '</div>';
      }
      if ($form_data['acas_badtimetocall']) {
        $html .= '<div class="form-item"><label class="control-label">Are there any days or times to avoid?</label>' . $form_data['acas_badtimetocall'] . '</div>';
      }
      if ($form_data['modeoffirstcontact']) {
        $html .= '<div class="form-item"><label class="control-label">What is the best way to contact you to arrange a conversation?</label>';
        $c = '';
        if ($form_data['modeoffirstcontact'][0] == '602700000') {
          $html .= 'Phone call';
          $c = ', ';
        }
        if ($form_data['modeoffirstcontact'][1] == '602700001') {
          $html .= $c . 'Email';
        }
        $html .= '</div>';
      }
      if ($form_data['acas_respondentcontactjobtitle'] || $form_data['acas_respondentcontactfirstname'] || $form_data['acas_respondentcontactsurname']) {
        $html .= '<div class="panel-title"><div class="form-item"><label class="control-label">Employer contact details:</label></div></div><div class="panel-body">';
        if ($form_data['acas_respondentcontactjobtitle']) {
          $html .= '<div class="form-item"><label class="control-label">Job title</label>' . $form_data['acas_respondentcontactjobtitle'] . '</div>';
        }
         if ($form_data['acas_respondentcontactfirstname']) {
          $html .= '<div class="form-item"><label class="control-label">First name</label>' . $form_data['acas_respondentcontactfirstname'] . '</div>';
        }
         if ($form_data['acas_respondentcontactsurname']) {
          $html .= '<div class="form-item"><label class="control-label">Last name</label>' . $form_data['acas_respondentcontactsurname'] . '</div>';
        }
         if ($form_data['acas_respondentcontactphonenumber']) {
          $html .= '<div class="form-item"><label class="control-label">Phone number</label>';
          $html .= $form_data['acas_respondentcontactphonenumber']['phone'];
          if ($form_data['acas_respondentcontactphonenumber']['ext']) {
            $html .= 'x' . $form_data['acas_respondentcontactphonenumber']['ext'];
          }
          $html .= '</div>';
        }
         if ($form_data['acas_respondentcontactemailaddress']) {
          $html .= '<div class="form-item"><label class="control-label">Email</label>' . $form_data['acas_respondentcontactemailaddress'] . '</div>';
        }
        $html .= '</div>';
      }
    }
  }
  if ($html) {
    $html = '<div class="col-xs-8 col-sm-6"><section id="block-sitebranding" class="block block-system block-system-branding-block clearfix"><img src="https://' . $_SERVER['HTTP_HOST'] . '/themes/custom/acas/toplogo.png" alt="Home"></section></div>
        <header id="block-acas-page-title" class="block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="page-header"><span>Your Acas notification details</span></h1></header>' . $html;
  }
  $css = file_get_contents(drupal_get_path('module', 'general') . '/css/download.css');
  $css = str_replace('[SITE]', 'https://' . $_SERVER['HTTP_HOST'], $css);
  $html = '<html><head><title>Your Acas notification details</title><style>' . $css . '</style></head><body class="notification-pdf">' . $html . '</body></html>';
  return $html;
}

/**
 * Implements notification_group_claimants_upload_validate().
 *
 * Validate the uploaded file of a group notification
 *
 */
function notification_group_claimants_upload_validate(&$form, FormStateInterface &$form_state) {
  if ($form_state->getValue('op') == 'Continue' && $template = $form_state->getValue('claimants')) {
    $msg = '';
    $count = 0;
    $file = \Drupal\file\Entity\File::load($template);
    $parts = parse_url($file->getFileUri());
    $extension = pathinfo($parts['path'], PATHINFO_EXTENSION );
    if ($extension == 'csv') {
      // CSV spreadsheet from tribunal etc.
      $data = [];
      if (($handle = fopen("/var/www/html/web/sites/default/files/private/webform" . $parts['path'], "r")) !== FALSE) {
        while (($row = fgetcsv($handle, 1000, ",")) !== FALSE) {
          // Ignore blank lines
          $check = 0;
          foreach($row as $r) {
            if (!$r) {
              $check++;
            }
          }
          if ($check < count($row)) {
            $data[] = $row;
          }
        }
        fclose($handle);
        // Check for no header eg
        if ($data[0][0] != 'Title') {
          $msg .= 'Incorrect or missing Header<br />';
        }
        else {
          $r = 1;
          foreach($data as $row) {
            if (!$row[1]) {
              $msg .= 'Row ' . $r . " missing <b>First name</b><br />";
            }
            if (!$row[4]) {
              $msg .= 'Row ' . $r . " missing <b>Building number or name</b><br />";
            }
            if (!$row[5]) {
              $msg .= 'Row ' . $r . " missing <b>Street</b><br />";
            }
            if (!$row[6]) {
              $msg .= 'Row ' . $r . " missing <b>City/Town</b><br />";
            }
            $r++;
            $count++;
          }
          $count--;
        }
      }
    }
    else {
      // Our spreadsheet
      module_load_include('inc', 'phpexcel', 'phpexcel');
      if (!$objPHPExcel = phpexcel_import('/var/www/html/web/sites/default/files/private/webform' . $parts['path'])) {
        $form_state->setErrorByName('claimant', 'You must include at least one claimant in the spreadsheet!');
      }
      else {
        // Check for no header eg
        if (key($objPHPExcel[0][0]) != 'First name') {
          $msg .= 'Incorrect or missing Header<br />';
        }
        else {
          foreach($objPHPExcel[0] as $key => $value) {
            // Ignore blank lines
            $check = 0;
            foreach($value as $r) {
              if (!$r) {
                $check++;
              }
            }
            if ($check < count($value)) {
              if (!$value['First name']) {
                $msg .= 'Row ' . ($key + 2) . " missing <b>First name</b><br />";
              }
              if (!$value['Address line 1']) {
                $msg .= 'Row ' . ($key + 2). " missing <b>Address line 1</b><br />";
              }
              if (!$value['City/Town']) {
                $msg .= 'Row ' . ($key + 2) . " missing <b>City/Town</b><br />";
              }
              $count++;
            }
          }
        }
      }
    }
    if ($count < 2) {
      $msg .= 'There must be at least 2 claimants!<br />';
    }
    if ($msg) {
      $msg .= 'Please correct the errors in the rows above and re-upload your spreadsheet. If you cannot correct the errors now, delete the rows that have errors and update your claim later.';
      $rendered_message = \Drupal\Core\Render\Markup::create($msg);
      $error_message = new TranslatableMarkup ('@message', array('@message' => $rendered_message));
      $form_state->setErrorByName('claimant', $error_message);
    }
    else {
      drupal_set_message("You have uploaded the details of $count claimants");
    }
  }
}

/**
 * Implements the EC Entry Switch
 */
function notification_ec_entry_switch() {
  if (isset($_COOKIE['ec_entry'])) {
    // Handle the old way of using a ec_entry node
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->join('node__field_destination', 'dest', 'dest.entity_id = nfd.nid');
    $query->fields('dest', ['field_destination_uri']);
    $query->fields('nfd', ['created']);
    $query->condition('nfd.title', $_COOKIE['ec_entry'], '=');
    try {
      $result = $query->execute();
      if ($dest = $result->fetchObject()) {
        if (isset($_SERVER['HTTP_REFERER'])) {
          $referrer = $_SERVER['HTTP_REFERER'];
        }
        else {
          $referrer = 'https://' . $_SERVER['HTTP_HOST'];
        }
        $cookie = ['referrer' => $referrer, 'destination' => $dest->field_destination_uri, 'entry' => $dest->created];
        setcookie('ec_entry_details', json_encode($cookie), time() + (86400 * 30), '/', '', TRUE);
        unset($_COOKIE['ec_entry']);
        setcookie('ec_entry', null, -1, '/');
        $response = new RedirectResponse($dest->field_destination_uri);
        $response->send();
        return;
      }
    } catch (Exception $e) {
      unset($_COOKIE['ec_entry']);
      setcookie('ec_entry', null, -1, '/');
    }
  }
  // See if a returning user (ec_entry_details cookie is set)
  // For testing, can bypass this test by adding ?nc=1 to URL
  if (isset($_COOKIE['ec_entry_details']) && !\Drupal::request()->query->get('nc')) {
    $ec_entry = (array) json_decode($_COOKIE['ec_entry_details']);
    $response = new RedirectResponse($ec_entry['destination']);
    $response->send();
    return;
  }
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('notification.ec_entry_switch');
  $enabled = TRUE;
  $now = time() - strtotime("today");
  $today = date('D');
  // Test if the user should be re-directed to the new form
  if (!$config->get('enabled')) {
    $enabled = FALSE;
  }
  elseif ($config->get('current_in_count') >= $config->get('in_count') || $config->get('current_out_count') >= $config->get('out_count')) {
    $enabled = FALSE;
  }
  elseif ($config->get('start_time') && $config->get('end_time') && ($now < $config->get('start_time') || $now > $config->get('end_time'))) {
    $enabled = FALSE;
  }
  elseif ($config->get('weekend') && ($today == 'Sat' || $today == 'Sun')) {
    $enabled = FALSE;
  }
  if (!$enabled) {
    // Re-direct to the old form
    $url = $config->get('old_url');
    if (\Drupal::hasService('mobile_detect')) {
      $mobileDetector = \Drupal::service('mobile_detect');
      if ($mobileDetector->isMobile()) {
        $url = str_replace('www.', 'm.', $url);
      }
    }
  }
  else {
    // Update the in count
    $config->set('current_in_count', $config->get('current_in_count') + 1);
    $config->save();
    // Re-direct to the new form.
    $url = $config->get('new_url');
  }
  if (isset($_SERVER['HTTP_REFERER'])) {
    $referrer = $_SERVER['HTTP_REFERER'];
  }
  else {
    $referrer = 'https://' . $_SERVER['HTTP_HOST'];
  }
  // Set the cookie so a returning user will always be re-directed to their original path
  $cookie = ['referrer' => $referrer, 'destination' => $url, 'entry' => time()];
  setcookie('ec_entry_details', json_encode($cookie), time() + (86400 * 30), '/', '', TRUE);
  // Send the re-direct response
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * Implements hook_cron().
 */
function notification_cron() {
  $hour = (int)date('H');
  if ($hour >= 3 && $hour <= 7) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('notification.ec_entry_switch');
    if ($config->get('clear_cron')) {
      if ($config->get('current_in_count') || $config->get('current_out_count')) {
        $config->set('current_in_count', 0)->set('current_out_count', 0)->save();
        \Drupal::logger('notification')->notice('Cleared current counts.');
      }
    }
  }
}

/**
 * Implements notification_company_house().
 *
 * Gets the company details of an employer from companies house
 *
 * @param employer
 *   The name of the employer
 */
function notification_company_house($employer) {
  $config = \Drupal::config('notification.companies_house');
  $api = new companiesHouseApi($config->get('api'));
  $response = $api->send('/search/companies', ['q' => $employer]);
  $return = [];
  foreach($response['items'] as $item) {
    if ($item['company_status'] == 'active') {
      $return[] = $item;
    }
  }
  return $return;
}

/**
 * Implementation of hook_mail().
 */
function notification_mail($key, &$message, $params) {
  switch($key) {
    case 'error':
      $message['headers']['Content-Type'] = SWIFTMAILER_FORMAT_HTML;
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = Markup::create($params['body']);
      break;
    default:
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
    }
}

/**
 * Implements notification_confirmation_group().
 *
 * The submission from the group Notification & Conciliation WebForms
 */
function notification_confirmation_group($webform, $webform_submission_id) {
  if (!$webform_submission = WebformSubmission::load($webform_submission_id)) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  if (!$data = $webform_submission->getData()) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  drupal_get_messages();
  if (isset($_COOKIE['webform_preview'])) {
    unset($_COOKIE['webform_preview']);
    setcookie('webform_preview', NULL, time()-3600, '/');
  }
  if ($data['form_type'] == 'GroupNotification') {
    // This is working.
    $data['acas_formtype'] = '602700000';
    $refnumber = notification_build_reference_number('group');
    $data['acas_groupid'] = $refnumber;
    $config = \Drupal::config('acas.settings');
    $number = $config->get('g10_flagged_phone');
    $node = \Drupal\node\Entity\Node::load(140);
    if ($node->hasField('field_subject')) {
      $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $data['acas_claimrepfirstname'], $node->field_subject->getString());
      $data['acas_emailbody'] = str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($data['acas_claimrepfirstname'] . ' ' . $data['acas_claimrepsurname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_groupid'], $node->field_message->getString()))));
    }
    if ($node->hasField('field_letter')) {
      $data['acas_lettercontent'] =  str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($data['acas_claimrepfirstname'] . ' ' . $data['acas_claimrepsurname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_groupid'], $node->field_letter->getString()))));
    }
    notification_group_claiments_generate($data, $webform_submission_id);
    if ($data['are_you_interested_in_settling_your_case_before_tribunal_'] == 2) {
      // Does not want conciliation
      
      // Delete the webform data. GDPR cop-out.
      //notification_delete_webform_submission($webform_submission_id);
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $view = $view_builder->view($node, 'full');
      $html = drupal_render($view);
      $html = str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $html);
      $html = str_replace('[DATE]', date('h:i A \o\n d F Y'), $html);
      $html = str_replace('[NUMBER]', $number, $html);
      if (!$result && $node->hasField('field_problem_message')) {
        if ($problem = $node->field_problem_message->getValue()) {
          $html = str_replace('[PROBLEM]', $problem[0]['value'], $html);
        }
      }
      else {
        $html = str_replace('[PROBLEM]', '', $html);
      }
      $html = '<header id="block-acas-page-title left" class="contextual-region block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="thank-you-page-header">' . $node->getTitle() . '</h1></header>' . $html;
      return $html;
    }
    else {
      $response = new RedirectResponse('/group-conciliation?acas_ecref=' . $data['acas_groupid']);
      $response->send();
      return;
    }
  }
  elseif ($data['form_type'] == 'GroupConciliation') {
    // Get GUID.
    $config = \Drupal::config('notification.dynamics');
    $url = $config->get('guid_url') . '?si_token=' . $config->get('guid_token') . '&acas_ecref=' . $data['acas_ecref'] . '&env=' . $config->get('environment');
    $guid = file_get_contents($url);
    $data['guid'] = '';
    if (strpos($guid, '<error>') !== FALSE) {
      $guid = NULL;
    }
    else {
      $j = json_decode($guid);
      if (isset($j->value[0])) {
        $data['guid'] = $j->value[0]->incidentid;
      }
    }
    $number = '';
    $data['acas_formtype'] = '602700001';
    $db = \Drupal::database();
    // Get Notification form data for names in the email & form1 timestamp;
    $result = $db->select('acas_ecrefno', 'a')
      ->fields('a', ['sid1', 'form1'])
      ->condition('a.group_no', $data['acas_ecref'], '=')
      ->execute()
      ->fetchAll();
    if (count($result) && $wfs = WebformSubmission::load($result[0]->sid1)) {
      $form1_data = $wfs->getData();
      $date = strtotime($result[0]->form1);
      $form1_sid = $result[0]->sid1;
    }
    else {
      $form1_data = [];
      $date = time();
      $form1_sid = 0;
    }
    $nid = 133;
    $node = \Drupal\node\Entity\Node::load($nid);
    if ($node->hasField('field_subject')) {
      $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $form1_data['acas_claimrepfirstname'], $node->field_subject->getString());
      $data['acas_emailbody'] = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', $date + 2419200), str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($form1_data['acas_claimrepfirstname'] . ' ' . $form1_data['acas_claimrepsurname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_ecref'], $node->field_message->getString())))));
    }
    if ($node->hasField('field_letter')) {
      $data['acas_lettercontent'] =  str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($form1_data['acas_claimrepfirstname'] . ' ' . $form1_data['acas_claimrepsurname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_ecref'], $node->field_letter->getString()))));
    }
    // Probably needs another endpoint on the integration layer.
    // If so, will need new fields in the Dynamics admin form /src/Form/DynamicsForm
    notification_send_dynamics($data);
    
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $view = $view_builder->view($node, 'full');
    $html = drupal_render($view);
    $html = str_replace('[REFERENCE]', $data['acas_ecref'], $html);
    $html = str_replace('[DATE]', date('h:i A \o\n d F Y', $date), $html);
    $html = str_replace('[ECDEADLINE]', date('h:i A \o\n d F Y', $date + 2419200), $html);
    $html = str_replace('[PROBLEM]', '', $html);
    $html = '<header id="block-acas-page-title left" class="contextual-region block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="thank-you-page-header">' . $node->getTitle() . '</h1></header>' . $html;
    return $html;
  }
}

/**
 * Implements notification_notification_confirmation().
 *
 * The submission from the individual Notification WebForm
 *
 * @param string webform
 *  The name of the webform
 * @param int webform_submission_id
 *  The webform id
 */
function notification_confirmation_notification($webform, $webform_submission_id) {
  // When a form is submitted, the webform record is deleted.
  // Check if the webform submission exists. This prevents a browser refresh on the thank you page re-submitting
  if (!$webform_submission = WebformSubmission::load($webform_submission_id)) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  if (!$data = notification_clean_data($webform_submission->getData())) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  drupal_get_messages();
  if (isset($_COOKIE['webform_preview'])) {
    unset($_COOKIE['webform_preview']);
    setcookie('webform_preview', NULL, time()-3600, '/');
  }

  $data['acas_formtype'] = '602700000';
  $refnumber = notification_build_reference_number();
  $data['acas_eccaserefnumber'] = $refnumber;
  $data['acas_dateofreceipt'] = date('Y-m-d');
  // Update the ec entry switch out count
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('notification.ec_entry_switch');
  $config->set('current_out_count', $config->get('current_out_count') + 1);
  $config->save();
  
  // Insert into acas_ecrefno
  $mobileDetector = \Drupal::service('mobile_detect');
  if (isset($_COOKIE['ec_entry_details'])) {
    $cookie = (array) json_decode($_COOKIE['ec_entry_details']);
  }
  else {
    $cookie = ['entry' => time(), 'referrer' => 'https://' . $_SERVER['HTTP_HOST']];
  }
  $db = \Drupal::database();
  $fields = [
    'entry' => date('Y-m-d H:i:s', $cookie['entry']),
    'sid1' => $webform_submission_id,
    'reference_no' => $refnumber,
    'form1' => date('Y-m-d H:i:s'),
    'mobile' => (int) $mobileDetector->isMobile(),
    'referrer' => $cookie['referrer'],
  ];
  $db->insert('acas_ecrefno')
    ->fields($fields)
    ->execute();
  if ($data['are_you_interested_in_settling_your_case_before_tribunal_'] == 'Yes' || $data['are_you_interested_in_settling_your_case_before_tribunal_'] == 1 || !$data['are_you_interested_in_settling_your_case_before_tribunal_']) {
    // Wants conciliation
    // Attach email in case never complete form 2
    $config = \Drupal::config('acas.settings');
    $number = $config->get('g10_flagged_phone');
    $nid = 131;
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $node = \Drupal\node\Entity\Node::load($nid);
    if ($node->hasField('field_subject')) {
      $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $data['acas_firstname'], $node->field_subject->getString());
      $data['acas_emailbody'] = str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($data['acas_firstname'] . ' ' . $data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $node->field_message->getString()))));
    }
    if ($node->hasField('field_letter')) {
      $data['acas_lettercontent'] =  str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($data['acas_firstname'] . ' ' . $data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $node->field_letter->getString()))));
    }
    notification_send_dynamics($data);
    $response = new RedirectResponse('/start-conciliation?acas_ecref=' . $data['acas_eccaserefnumber']);
    $response->send();
    return;
  }
  else {
    // Does not want conciliation
    $config = \Drupal::config('acas.settings');
    $number = $config->get('g10_flagged_phone');
    if (!$data['acas_emailaddress'] && !$data['acas_maincontactnumber']) {
      $nid = 134;
    }
    else if (!$data['acas_emailaddress'] && $data['acas_maincontactnumber']) {
      $nid = 158;
    }
    else {
      $nid = 117;
    }
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $node = \Drupal\node\Entity\Node::load($nid);
    if ($node->hasField('field_subject')) {
      $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $data['acas_firstname'], $node->field_subject->getString());
      $data['acas_emailbody'] = str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($data['acas_firstname'] . ' ' . $data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $node->field_message->getString()))));
    }
    if ($node->hasField('field_letter')) {
      $data['acas_lettercontent'] =  str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($data['acas_firstname'] . ' ' . $data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y'), str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $node->field_letter->getString()))));
    }
    $result = notification_send_dynamics($data);
    // Delete the webform data. GDPR cop-out.
    //notification_delete_webform_submission($webform_submission_id);
    $view = $view_builder->view($node, 'full');
    $html = drupal_render($view);
    $html = str_replace('[REFERENCE]', $data['acas_eccaserefnumber'], $html);
    $html = str_replace('[DATE]', date('h:i A \o\n d F Y'), $html);
    $html = str_replace('[NUMBER]', $number, $html);
    $html = str_replace('[DOWNLOAD]', 'download-pdf/' . $webform_submission_id . '/0?ecref=' . $data['acas_eccaserefnumber'], $html);
    if (!$result && $node->hasField('field_problem_message')) {
      if ($problem = $node->field_problem_message->getValue()) {
        $html = str_replace('[PROBLEM]', $problem[0]['value'], $html);
      }
    }
    else {
      $html = str_replace('[PROBLEM]', '', $html);
    }
    $html = '<header id="block-acas-page-title left" class="contextual-region block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="thank-you-page-header">' . $node->getTitle() . '</h1></header>' . $html;
    return $html;
  }
}

/**
 * Implements notification_conciliation_confirmation().
 *
 * The submission from the individual Conciliation WebForm
 *
 * @param string webform
 *  The name of the webform
 * @param int webform_submission_id
 *  The webform id
 */
function notification_confirmation_conciliation($webform, $webform_submission_id) {
  // When a form is submitted, the webform record is deleted.
  // Check if the webform submission exists. This prevents a browser refresh on the thank you page re-submitting
  if (!$webform_submission = WebformSubmission::load($webform_submission_id)) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  if (!$data = notification_clean_data($webform_submission->getData())) {
    $response = new RedirectResponse('/');
    $response->send();
    return;
  }
  drupal_get_messages();
  if (isset($_COOKIE['webform_preview'])) {
    unset($_COOKIE['webform_preview']);
    setcookie('webform_preview', NULL, time()-3600, '/');
  }

  // Get acas_ecref.
  if (!$data['acas_ecref'] && isset($_SESSION['acas_ecref'])) {
    $data['acas_ecref'] = $_SESSION['acas_ecref'];
  }
  if (isset($_SESSION['acas_ecref'])) {
    unset($_SESSION['acas_ecref']);
  }
  // Get GUID.
  $config = \Drupal::config('notification.dynamics');
  $url = $config->get('guid_url') . '?si_token=' . $config->get('guid_token') . '&acas_ecref=' . $data['acas_ecref'] . '&env=' . $config->get('environment');
  $guid = file_get_contents($url);
  $data['guid'] = '';
  if (strpos($guid, '<error>') !== FALSE) {
    $guid = NULL;
  }
  else {
    $j = json_decode($guid);
    if (isset($j->value[0])) {
      $data['guid'] = $j->value[0]->incidentid;
    }
  }
  $data['acas_formtype'] = '602700001';
  $config = \Drupal::config('acas.settings');
  $flag = FALSE;
  if ($flags = notification_flags($data)) {
    $flag = TRUE;
  }
  $db = \Drupal::database();
  // Get Notification form data for names in the email & form1 timestamp;
  $result = $db->select('acas_ecrefno', 'a')
    ->fields('a', ['sid1', 'form1'])
    ->condition('a.reference_no', $data['acas_ecref'], '=')
    ->execute()
    ->fetchAll();
  if (count($result) && $wfs = WebformSubmission::load($result[0]->sid1)) {
    $form1_data = $wfs->getData();
    $date = strtotime($result[0]->form1);
    $form1_sid = $result[0]->sid1;
  }
  else {
    $form1_data = [];
    $date = time();
    $form1_sid = 0;
  }
    
  // Wages or holiday (not anything else) = fasttracked
  $number = '';
  if ($data['do_you_believe_that_you_have_been_discriminated_against'] != 1 && !$data['do_you_believe_you_have_been_unfairly_dismissed_or_made_redundan'] != 2 && $data['do_you_think_you_are_owed_wages'] == 1) {
    $nid = 126;
    // Fasttrack number
    $number = $config->get('g10_fasttrack_phone');
  }
  else if ($form1_data && !$form1_data['acas_emailaddress'] && !$form1_data['acas_maincontactnumber']) {
    $nid = 135;
    $number = $config->get('g10_flagged_phone');
  }
  else if (!$flags){
    $nid = 114;
  }
  if ($flags) {
    // If flagged show this node no matter what.
    $nid = 118;
    $number = $config->get('g10_flagged_phone');
  }
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  if (!$node = \Drupal\node\Entity\Node::load($nid)) {
    $node = \Drupal\node\Entity\Node::load(94);
  }
  if ($form1_data && $node->hasField('field_subject')) {
    $data['acas_emailsubject'] = str_replace('[FIRSTNAME]', $form1_data['acas_firstname'], $node->field_subject->getString());
    $data['acas_emailbody'] = str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($form1_data['acas_firstname'] . ' ' . $form1_data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y', $date), str_replace('[REFERENCE]', $data['acas_ecref'], $node->field_message->getString()))));
  }
  if ($form1_data && $node->hasField('field_letter')) {
    $data['acas_lettercontent'] =  str_replace('[NUMBER]', $number, str_replace('[FULLNAME]', trim($form1_data['acas_firstname'] . ' ' . $form1_data['acas_surname']), str_replace('[DATE]', date('h:i A \o\n d F Y', $date), str_replace('[REFERENCE]', $data['acas_ecref'], $node->field_letter->getString()))));
  }
  $result = TRUE;
  if ($data['guid']) {
    $data['acas_dateofreceipt'] = date('Y-m-d', $date);
    $result = notification_send_dynamics($data);
    $status = 1; // Got GUID
  }
  else {
    $status = 4; //Failed to get GUID
  }
  // Update acas_ecrefno for form2
  $db->update('acas_ecrefno')
    ->fields(['status' => $status, 'sid2' => $webform_submission_id, 'guid' => $data['guid'], 'form2' => date('Y-m-d H:i:s'), 'flag' => (int) $flag])
    ->condition('reference_no', $data['acas_ecref'], '=')
    ->execute();
  // Delete the webform data. GDPR cop-out.
  if ($form1_sid) {
    // Form1
    //notification_delete_webform_submission($form1_sid);
  }
  // Form 2
  //notification_delete_webform_submission($webform_submission_id);
  $view = $view_builder->view($node, 'full');
  $html = drupal_render($view);
  $html = str_replace('[REFERENCE]', $data['acas_ecref'], $html);
  $html = str_replace('[DATE]', date('h:i A \o\n d F Y', $date), $html);
  $html = str_replace('[NUMBER]', $number, $html);
  $html = str_replace('[DOWNLOAD]', 'download-pdf/' . $form1_sid . '/' . $webform_submission_id . '?ecref=' . $data['acas_ecref'], $html);
  if (!$data['guid'] || !$result && $node->hasField('field_problem_message')) {
    if ($problem = $node->field_problem_message->getValue()) {
      $html = str_replace('[PROBLEM]', $problem[0]['value'], $html);
    }
  }
  else {
    $html = str_replace('[PROBLEM]', '', $html);
  }
  if ($data['is_this_employer_still_trading'] == 'No') {
    $html = str_replace('[SPECIFIC GUIDANCE]', 'You told us that your employer has ceased trading. You can <a href="https://www.gov.uk/your-rights-if-your-employer-is-insolvent" target="_blank">find out what rights you have as the employee of an insolvent employer on GOV.UK.</a>', $html);
  }
  else {
    $html = str_replace('[SPECIFIC GUIDANCE]', '', $html);
  }
  $html = '<header id="block-acas-page-title left" class="contextual-region block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="thank-you-page-header">' . $node->getTitle() . '</h1></header>' . $html;
  return $html;
}

/**
 * Implements notification_group_claiments_generate().
 *
 * Generate the notifications for a group.
 *
 * @param array data
 *  The data to send to Dynamics
 * @param int webform_submission_id
 *  The webform submission id
 */
function notification_group_claiments_generate($data, $webform_submission_id) {
  if ($data['claimants']) {
    $mobileDetector = \Drupal::service('mobile_detect');
    if (isset($_COOKIE['ec_entry_details'])) {
      $cookie = (array) json_decode($_COOKIE['ec_entry_details']);
    }
    else {
      $cookie = ['entry' => time(), 'referrer' => 'https://' . $_SERVER['HTTP_HOST']];
    }
    $db = \Drupal::database();
    $file = \Drupal\file\Entity\File::load($data['claimants']);
    $parts = parse_url($file->getFileUri());
    $extension = pathinfo($parts['path'], PATHINFO_EXTENSION );
    if ($extension == 'csv') {
      // CSV spreadsheet from tribunal etc.
      $csv = [];
      if (($handle = fopen("/var/www/html/web/sites/default/files/private/webform" . $parts['path'], "r")) !== FALSE) {
        while (($row = fgetcsv($handle, 1000, ",")) !== FALSE) {
          // Ignore blank lines
          $check = 0;
          foreach($row as $r) {
            if (!$r) {
              $check++;
            }
          }
          if ($check < count($row)) {
            $csv[] = $row;
          }
        }
        fclose($handle);
        unset($csv[0]); // Header
        foreach($csv as $row) {
          $data['acas_eccaserefnumber'] = notification_build_reference_number();
          $data['acas_firstname'] = $row[1];
          $data['acas_surname'] = $row[2];
          $data['claimant_address'] = [
            'address' => $row[4] . ' ' . $row[5],
            'address_2' => '',
            'city' => $row[6],
            'postal_code' => $row[8],
          ];
          // Insert into acas_ecrefno
          $fields = [
            'entry' => date('Y-m-d H:i:s', $cookie['entry']),
            'sid1' => $webform_submission_id,
            'reference_no' => $data['acas_eccaserefnumber'],
            'group_no' => $data['acas_groupid'],
            'form1' => date('Y-m-d H:i:s'),
            'mobile' => (int) $mobileDetector->isMobile(),
            'referrer' => $_COOKIE['referrer'],
          ];
          $db->insert('acas_ecrefno')
            ->fields($fields)
            ->execute();
          $result = notification_send_dynamics($data);
        }
      }
      else {
        return FALSE;
      }
    }
    else {
      // Our spreadsheet
      module_load_include('inc', 'phpexcel', 'phpexcel');
      if (!$objPHPExcel = phpexcel_import('/var/www/html/web/sites/default/files/private/webform' . $parts['path'])) {
        return FALSE;
      }
      foreach ($objPHPExcel[0] as $claimant) {
        // Ignore blank lines
        $check = 0;
        foreach($claimant as $r) {
          if (!$r) {
            $check++;
          }
        }
        if ($check < count($claimant)) {
          $data['acas_eccaserefnumber'] = notification_build_reference_number();
          $data['acas_firstname'] = $claimant['First name'];
          $data['acas_surname'] = $claimant['Last name'];
          $data['claimant_address'] = [
            'address' => $claimant['Address line 1'],
            'address_2' => $claimant['Address line 2'],
            'city' => $claimant['City/Town'],
            'postal_code' => $claimant['Postcode'],
          ];
          // Insert into acas_ecrefno
          $fields = [
            'entry' => date('Y-m-d H:i:s', $cookie['entry']),
            'sid1' => $webform_submission_id,
            'reference_no' => $data['acas_eccaserefnumber'],
            'group_no' => $data['acas_groupid'],
            'form1' => date('Y-m-d H:i:s'),
            'mobile' => (int) $mobileDetector->isMobile(),
            'referrer' => $_COOKIE['referrer'],
          ];
          $db->insert('acas_ecrefno')
            ->fields($fields)
            ->execute();
          $result = notification_send_dynamics($data);
        }
      }
    }
  }
}

/**
 * Implements notification_flags().
 *
 * Build the flags for Dynamics
 *
 * @param array data
 *  The data to check for flags
 */
function notification_flags($data) {
  $flags = [];
  foreach($data as $key => $value) {
    // Form1
    if ($key == 'are_you_interested_in_settling_your_case_before_tribunal_' && $value == 2) {
      $flags['acas_flagnoconciliation'] = TRUE;
    }
    // All form 2
    if ($key == 'problem_several_colleagues' && $value == 2) {
      $flags['acas_flagoneofseveralemployees'] = TRUE;
    }
    if ($key == 'is_this_employer_still_trading' && $value == 'No') {
      $flags['acas_flaginsolvency'] = TRUE;
    }
    if ($key == 'have_you_been_employed_by_this_employer_for_a_2_years_or_more_' && $value == 'No') {
      $flags['acas_flaglessthan2yearsemployment'] = TRUE;
    }
    if ($key == 'when_were_you_dismissed' && $value && $value['day'] && $value['month'] && $value['year'] && $data['is_your_dispute_about_redundancy_pay_optional_'] == 1) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $a = strtotime($date);
      // 3 months
      if (time() - strtotime($date) > (86400 * 89)) {
        $flags['acas_flagoutoftime'] = TRUE;
      }
    }
   if ($key == 'when_were_you_dismissed' && $value && $value['day'] && $value['month'] && $value['year'] && $data['is_your_dispute_about_redundancy_pay_optional_'] == 2) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      // 6 months
      if (time() - strtotime($date) > (86400 * 179)) {
        $flags['acas_flagoutoftime6month'] = TRUE;
      }
    }
    if ($key == 'when_were_you_not_paid_properly_optional_' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      // 3 months
      if (time() - strtotime($date) > (86400 * 89)) {
        $flags['acas_flagoutoftime'] = TRUE;
      }
    }
    if ($key == 'have_you_asked_your_employer_in_writing_to_resolve_this_dispute_' && ($value == 1 || $value == 3)) {
      $flags['acas_flaginternalprocessnotcomplete'] = TRUE;
    }
    if ($key == 'acas_emailaddress' && !$value && !$data['acas_maincontactnumber']) {
      // Individual 
      $flags['acas_flagnoncontactable'] = TRUE;
    }
    if ($key == 'acas_claimrepemailaddress' && !$value && !isset($data['acas_claimrepmainphoneno']) && isset($data['acas_groupid'])) {
      // Group
      $flags['acas_flagnoncontactable'] = TRUE;
    }
  }
  return $flags;
}

/**
 * Implements notification_send_dynamics().
 *
 * Build the JSON and send to Dynamics.
 *
 * @param array data
 *  The data to send to Dynamics
 */
function notification_send_dynamics($data) {
  $json = [];
  $json['form_type'] = str_replace('Group', '', $data['form_type']);
  if ($flags = notification_flags($data)) {
    $json = array_merge($json, $flags);
  }
  $incident_type = [];
  $info = '';
  $dates = [];
  if (isset($data['guid'])) {
    $json['guid'] = $data['guid'];
  }
  // This will need removing when Dynamics handles 'acas_relatedcaseid'
  if (isset($data['acas_relatedcaseid'])) {
    unset($data['acas_relatedcaseid']);
  }
  
  foreach($data as $key => $value) {
    if (is_string($value) && strpos($key, 'acas_') !== FALSE) {
      $json[$key] = notification_encode($value);
    }
    elseif (is_array($value) && strpos($key, '_address') !== FALSE) {
      if ($key == 'claimant_address') {
        $json['acas_addressline1'] = notification_encode($value['address']);
        $json['acas_addressline2'] = notification_encode($value['address_2']);
        $json['acas_citytown'] = notification_encode($value['city']);
        $json['acas_postcode'] = notification_encode($value['postal_code']);
      }
      elseif ($key == 'representative_address') {
        $json['acas_claimrepaddressline1'] = notification_encode($value['address']);
        $json['acas_claimrepaddressline2'] = notification_encode($value['address_2']);
        $json['acas_claimrepcitytown'] = notification_encode($value['city']);
        $json['acas_claimreppostcode'] = notification_encode($value['postal_code']);
      }
      elseif ($key == 'respondant_address') {
        $json['acas_respaddressline1'] = notification_encode($value['address']);
        $json['acas_respaddressline2'] = notification_encode($value['address_2']);
        $json['acas_respcitytown'] = notification_encode($value['city']);
        $json['acas_resppostcode'] = notification_encode($value['postal_code']);
      }
    }
    elseif (is_array($value) && isset($value['phone']) && $value['phone']) {
      $json[$key] = notification_encode($value['phone']);
      if ($value['ext']) {
        $json[$key] .= 'x' . notification_encode($value['ext']);
      }
    }
    /*
    elseif (is_array($value) && $key == 'acas_modeoffirstcontact') {
      $json['acas_modeoffirstcontact'] = implode(',', $value);
    }
    */
   if ($key == 'modeoffirstcontact' && $value) {
      $info .= "Claimant's preferred method of first contact: ";
      foreach($value as $key) {
        if ($key == '602700000') {
          $info .= 'Phone call ';
        }
        else if ($key == '602700001') {
          $info .= 'Email ';
        }
        else if ($key == '602700002') {
          $info .= 'Text messages ';
        }
        $info .= "\n";
      }
    }
    if ($key == 'do_you_believe_that_you_have_been_discriminated_against' && $value) {
      $incident_type[] = '602700003';
      $info .= "Claimant believes they have been discriminated against at work.\n";
      unset($data[$key]);
    }
    if ($key == 'do_you_think_you_are_owed_holiday_by_your_employer' && $value) {
      $incident_type[] = '602700001';
      unset($data[$key]);
    }
    if ($key == 'do_you_think_you_are_owed_wages' && $value) {
      $incident_type[] = '602700000';
      $info .= "Claimant thinks they are owed wages and/or holiday pay.\n";
      unset($data[$key]);
    }
    if ($key == 'acas_monetaryvalue' && $value) {
      $info .= "Claimant says they are owed £$value in wages and/or holiday pay.\n";
    }
    if ($key == 'do_you_believe_you_have_been_unfairly_dismissed_or_made_redundan' && $value) {
      if ($value == 2) {
        // unfairly dismissed
        $incident_type[] = '602700002';
        $info .= "Claimant's dispute is about unfair dismissal\n";
      }
      elseif ($value == 3) {
        // made redundant
        $incident_type[] = '602700004';
        $info .= "Claimant's dispute is about redundancy\n";
      }
      unset($data[$key]);
    }
    if ($key == 'is_your_dispute_about_your_selection_for_redundancy_' && $value == 'Yes') {
      $info .= "Claimant believes they were unfairly selected for redundancy.\n";
      unset($data[$key]);
    }
    if ($key == 'is_your_dispute_about_redundancy_pay_optional_' && $value == 2) {
      $info .= "Claimant believes they are owed redundancy pay.\n";
      unset($data[$key]);
    }
    if ($key == 'are_you_currently_unemployed_' && $value == 'Yes') {
      $info .= "Claimant is currently unemployed.\n";
      unset($data[$key]);
    }
    if ($key == 'did_you_have_a_meeting_with_your_employer_before_you_were_dismis' && $value) {
      if ($value == 'No') {
        $info .= "Claimant says they did not have a meeting with their employer before they were dismissed.\n";
      }
      elseif ($value == 'Yes') {
        $info .= "Claimant says they did have a meeting with their employer before they were dismissed.\n";
      }
      else {
        $info .= "Claimant says they don’t know if they had a meeting with their employer before they were dismissed.\n";
      }
      unset($data[$key]);
    }
    if ($key == 'did_you_meet_with_your_employer_after_you_were_dismissed_' && $value) {
      if ($value == 'No') {
        $info .= "Claimant says they did not have a meeting with their employer after they were dismissed.\n";
      }
      elseif ($value == 'Yes') {
        $info .= "Claimant says they did have a meeting with their employer after they were dismissed.\n";
      }
      unset($data[$key]);
    }
    if ($key == 'please_give_us_a_brief_explanation_about_your_claim' && $value) {
      $info .= $value . "\n";
    }
    if ($key == 'did_your_employer_given_any_explanation_optional_' && $value) {
      $info .= "Employer explanation for dismissal as described by claimant:  $value\n";
      unset($data[$key]);
    }
    if ($key == 'do_you_know_what_you_want_as_an_outcome_' && $value) {
      $info .= "Claimant wants: $value\n";
      unset($data[$key]);
    }
    if ($key == 'do_you_know_what_you_want_as_an_outcome_2' && $value) {
      $info .= "Claimant wants: $value\n";
      unset($data[$key]);
    }
    if ($key == 'do_you_know_what_you_want_as_an_outcome_3' && $value) {
      $info .= "Claimant wants: $value\n";
      unset($data[$key]);
    }
    if ($key == 'explain_why_you_think_you_are_owed_wages_optional_' && $value) {
      $info .= "Claimant believes they are owed money: $value\n";
      unset($data[$key]);
    }
    if ($key == 'tell_us_more_about_your_case_' && $value) {
      $info .= "Claimant believes they have been discriminated against: $value\n";
      unset($data[$key]);
    }
    if ($key == 'what_did_your_employer_decide_about_your_dispute_optional_' && $value) {
      $info .= "Claimant says employer's response to grievance: $value\n";
      unset($data[$key]);
    }
    if ($key == 'is_there_anything_else_you_want_to_tell_us_optional_' && $value) {
      $info .= "Additional information form Claimant: $value\n";
      unset($data[$key]);
    }
    if ($key == 'have_you_told_your_employer_and_asked_them_to_rectify_the_proble' && $value) {
      if ($value == 'Yes') {
        $h = 'has';
      }
      else {
        $h = 'has not';
      }
      $info .= "Claimant $h asked the employer for this money.\n";
      unset($data[$key]);
    }
    if ($key == 'how_much_holiday_do_you_think_you_are_owed' && $value) {
      $info .= "$value holiday days are in dispute.\n";
      unset($data[$key]);
    }
    if ($key == 'i_believe_that_my_employer_has_discriminated_against_me_because_' && $value) {
      $r = implode(', ', $value);
      $info .= "Claimant is claiming $r discrimination.\n";
      unset($data[$key]);
    }
    if ($key == 'have_you_been_employed_by_this_employer_for_a_2_years_or_more_' && $value == 'No') {
      $info .= "Claimant has NOT worked for 2 years or more for this employer.\n";
      unset($data[$key]);
    }
    if ($key == 'are_you_currently_employed_by_the_employer_' && $value) {
      if ($value == 'Yes') {
        $h = 'is';
      }
      else {
        $h = 'is not';
      }
      $info .= "Claimant $h employed by this employer.\n";
      unset($data[$key]);
    }
    if ($key == 'problem_several_colleagues' && $value == 2) {
      $info .= "Claimant says they are one of a number of employees involved in the same dispute.\n";
      unset($data[$key]);
    }
    if ($key == 'is_this_employer_still_trading' && $value) {
      if ($value == 'No') {
        $info .= "Claimant states that employer is no longer in business\n";
      }
      elseif ($value == "I'm not sure") {
        $info .= "Claimant is unsure if the employer is still in business\n";
      }
      elseif ($value == "They have been taken over by another employer") {
        $info .= "Claimant states that the employer has been taken over\n";
      }
      unset($data[$key]);
    }
    if ($key == 'do_you_have_a_written_contract_of_employment_with_this_employer_' && $value) {
      if ($value == 'Yes') {
        $info .= "Claimant says they did have a written contract with their employer.\n";
      }
      elseif ($value == 'No') {
        $info .= "Claimant says they did not have a written contract with their employer.\n";
      }
      else {
        $info .= "Claimant does not know whether they had a written contract with their employer.\n";
      }
    }
    if ($key == 'have_you_asked_your_employer_in_writing_to_resolve_this_dispute_' && $value) {
      if ($value == 1) {
        $info .= "Claimant says they have not discussed the dispute with their employer.\n";
      }
      elseif ($value == 2) {
        $info .= "Claimant says they have discussed the dispute with their employer.\n";
      }
      else {
        $info .= "Claimant says their employer is looking into the dispute.\n";
      }
      unset($data[$key]);
    }
    if ($key == 'acas_respondentcontactjobtitle' && $value) {
      $info .= "Respondent Contact's job title: $value.\n";
    }
    if ($key == 'when_were_you_dismissed' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = str_pad($value['day'], 2, '0', STR_PAD_LEFT) . '/' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '/' . $value['year'];
      $info .= 'Claimants last day of work was ' . $date . "\n";
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $dates[] = strtotime($date);
      unset($data[$key]);
    }
    if ($key == 'when_were_you_made_redundant_optional_' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = str_pad($value['day'], 2, '0', STR_PAD_LEFT) . '/' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '/' . $value['year'];
      $info .= 'Claimant believes they were made redundant on ' . $date . "\n";
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $dates[] = strtotime($date);
      unset($data[$key]);
    }
    if ($key == 'when_were_you_not_paid_properly_optional_' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = str_pad($value['day'], 2, '0', STR_PAD_LEFT) . '/' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '/' . $value['year'];
      $info .= 'Claimant believes they were last paid on ' . $date . "\n";
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $dates[] = strtotime($date);
      unset($data[$key]);
    }
    if ($key == 'when_were_you_discriminated_against_optional' && $value && $value['day'] && $value['month'] && $value['year']) {
      $date = str_pad($value['day'], 2, '0', STR_PAD_LEFT) . '/' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '/' . $value['year'];
      $info .= 'Claimant believes they were last discriminated on ' . $date . "\n";
      $date = $value['year'] . '-' . str_pad($value['month'], 2, '0', STR_PAD_LEFT) . '-' . str_pad($value['day'], 2, '0', STR_PAD_LEFT);
      $dates[] = strtotime($date);
      unset($data[$key]);
    }
    if ($key == 'is_your_claim_against_one_person_or_a_whole_organisation_') {
      if ($value == 1) {
        $json['acas_respondenttype'] = '602700000'; // Organisation
      }
      else {
        $json['acas_respondenttype'] = '602700001'; // Person
      }
      unset($data[$key]);
    }
    if ($key == 'is_there_someone_helping_you_through_this_process_optional_' && $value > 1) {
        if ($value == 2) {
          $json['acas_relationtoclaimant'] = 'Solicitor';
        }
        else if ($value == 3) {
          $json['acas_relationtoclaimant'] = 'Trade union official';
        }
        unset($data[$key]);
    }
    if ($key == 'how_much_redundancy_pay_do_you_think_you_are_owed_optional_' && $value) {
      $info .= "Claimant says they are owed £$value in redundancy pay\n";
      unset($data[$key]);
    }
    
    // Group
    if ($key == 'are_you_a_professional_representative_or_a_lead_claimant_optiona' && $value) {
      $info .= 'Are you a professional representative or a lead claimant? ' . $value . "\n";
      unset($data[$key]);
    }
    if ($key == 'please_tell_us_why_optional_' && $value) {
      $info .= 'Claimant rep does not want to conciliate because: ' . $value . "\n";
      unset($data[$key]);
    }
  }
  if ($dates) {
    $json['acas_incidentdate'] = date('Y-m-d', max($dates));
  }
  if ($incident_type) {
    $json['acas_incidenttype'] = implode(',', $incident_type);
  }  
  if (!isset($json['acas_incidenttype'])) {
    //$json['acas_incidenttype'] = '602700000';
  }
  // Make sure acas_incidentinfo is <= 12K chars.
  $json['acas_incidentinfo'] = notification_encode(substr($info, 0, 12000));
  
  // Make sure acas_monetaryvalue is an int or 0
  if (isset($json['acas_monetaryvalue']) && !$json['acas_monetaryvalue']) {
    $json['acas_monetaryvalue'] = '0';
  }
  if (isset($json['acas_monetaryvalue'])) {
    $json['acas_monetaryvalue'] = (int) $json['acas_monetaryvalue'];
  }
  //$json['a_test_of_an_error'] = 'error';
  
  if (isset($_COOKIE['json'])) {
    $html = '<h2>JSON data</h2><pre>' . print_r($json, TRUE) . '</pre>';
    die($html);
  }
  
  // Now send the data
  $data_string = json_encode($json);
  $config = \Drupal::config('notification.dynamics');
  $ch = curl_init($config->get('url') . '?si_token=' . $config->get('token') . '&env=' . $config->get('environment'));                                                                      
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");                                                                     
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);                                                                      
  curl_setopt($ch, CURLOPT_HTTPHEADER, [                                                                          
    'Content-Type: application/json',                                                                                
    'Content-Length: ' . strlen($data_string)]                                                                       
  );                                                                                                                   
  $result = curl_exec($ch);
  $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  if (isset($data['acas_ecref'])) {
    $ref = $data['acas_ecref'];
  }
  else {
    $ref = $data['acas_eccaserefnumber'];
  }
  // Write to watchdog log
  \Drupal::logger('Send Dynamics')->notice('Form = ' . $data['form_type'] . ', Reference = ' . $ref);
  if (($result != 'Accepted' && $result != '') || $http_status != 200) {
    // If all is well, Dynamics does not return anything on success.
    // The integration layer returns Accepted if using assured delivery
    // Either a Dynamics error or none 200 response from the integration layer.
    // Write failure to watchdog log
    \Drupal::logger('Dynamics Error')->notice('Status = ' . $http_status . '<br /> JSON = <pre>' . $data_string . '</pre><hr><br /> Result = <pre>' . $result . '</pre>');
    // Send email
    $config = \Drupal::config('acas.settings');
    $mailManager = \Drupal::service('plugin.manager.mail');
    $params['subject'] = 'Notifications Form Error (' . $_SERVER['HTTP_HOST'] . ', ' . $ref . ')';
    $body = 'Status: ' . $http_status . '<br />Data:<pre>' . print_r($json, TRUE) . '</pre>Error:<pre>' . print_r(json_decode($result), TRUE) . '</pre>';
    $params['body'] = $body;
    $mailManager->mail('notification', 'error', $config->get('error_email'), \Drupal::currentUser()->getPreferredLangcode(), $params, NULL, TRUE);
    // Insert into acas_notify_errors table
    $db = \Drupal::database();
    if (!isset($data['guid'])) {
      $data['guid'] = NULL;
    }
    $fields = ['form' => $data['form_type'], 'guid' => $data['guid'], 'status' => $http_status, 'reference_no' => $ref, 'data' => $data_string, 'error' => $result];
    $db->insert('acas_notify_errors')
      ->fields($fields)
      ->execute();
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements notification_encode().
 *
 * Encode special chars for Dynamics
 *
 * @param string
 *   The string to encode
 */
function notification_encode($string) {
  $string = str_replace('\\', '\u005C', $string); // Handle back slash. Must be 1st or will encode the back slash on other unicode encodings
  $string = str_replace('"', '\u0022', $string); // Handle double quote
  return $string;
}

/**
 * Implements notification_delete_webform_submission().
 *
 * Delete a webform submission
 *
 * @param int sid
 *   The webform sid to delete
 */
function notification_delete_webform_submission($sid) {
  if (_is_site('dev')) {
    // Keep data if dev for testing
    return;
  }
  $db = \Drupal::database();
  $db->delete('webform_submission')
    ->condition('sid', $sid, '=')
    ->execute();
  $db->delete('webform_submission_data')
    ->condition('sid', $sid, '=')
    ->execute();
}

/**
 * Implements notification_build_reference_number().
 *
 * Gets the next reference number
 *
 * @param string type
 *   The type to fetch, individual or group
 */
function notification_build_reference_number($type = 'individual') {
  $config = \Drupal::config('acas.settings');
  $process = curl_init($config->get('notification_ref_no_ip') . '?t=' . $type . '&s=' . $_SERVER['HTTP_HOST']);
  curl_setopt($process, CURLOPT_USERPWD, $config->get('notification_ref_userpass'));
  curl_setopt($process, CURLOPT_TIMEOUT, 30);
  curl_setopt($process, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($process, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($process, CURLOPT_FOLLOWLOCATION, TRUE); 
  $number = curl_exec($process);
  curl_close($process);
  return $number;
}

/**
 * Implements notification_get_current_reference_number().
 *
 * Gets the current reference number
 *
 * @param string type
 *   The type to fetch, individual or group
 */
function notification_get_current_reference_number($type = 'group') {
  $config = \Drupal::config('acas.settings');
  $process = curl_init($config->get('notification_ref_no_ip') . '?t=' . $type . '&s=' . $_SERVER['HTTP_HOST'] . '&n=1');
  curl_setopt($process, CURLOPT_USERPWD, $config->get('notification_ref_userpass'));
  curl_setopt($process, CURLOPT_TIMEOUT, 30);
  curl_setopt($process, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($process, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($process, CURLOPT_FOLLOWLOCATION, TRUE); 
  $number = curl_exec($process);
  curl_close($process);
  return $number;
}

/**
 * Implements notification_clean_data().
 *
 * Remove unwanted rows from webform submission data
 *
 * @param array data
 *   The webform submission data to clean
 */
function notification_clean_data($data) {
  $return = [];
  foreach($data as $key => $value) {
    if (strpos($key, 'feedback_text') === FALSE) {
      $return[$key] = $value;
    }
  }
  return $return;
}

/**
 * Implements notification_errors_delete().
 *
 * Delete from the acas_notify_errors table
 *
 * @param int id
 *   The id of the row to delete
 */
function notification_errors_delete($id) {
  $db = \Drupal::database();
  $db->delete('acas_notify_errors')
    ->condition('id', $id, '=')
    ->execute();
  return 'ok';
}

/**
 * Implements notification_errors_submit().
 *
 * Re-submit a submission to Dynamics
 *
 * @param int id
 *   The id of the row in the acas_notify_errors table
 */
function notification_errors_submit($id) {
  $db = \Drupal::database();
  $config = \Drupal::config('notification.dynamics');
  $msg = '';
  $data = \Drupal::request()->query->get('json');
  if ($data = (array) json_decode($data)) {
    if ($data['form_type'] == 'Notification') {
      if (notification_send_dynamics($data)) {
        $msg = 'ok';
      }
      else {
        $msg = 'There was a Dynamics error';
      }
    }
    else {
      // Conciliation
      if (!$data['guid']) {
        $url = $config->get('guid_url') . '?si_token=' . $config->get('guid_token') . '&acas_ecref=' . $data['acas_ecref'] . '&env=' . $config->get('environment');
        $guid = file_get_contents($url);
        if (strpos($guid, '<error>') !== FALSE) {
          $msg = 'Failed to get GUID';
        }
        else {
          $j = json_decode($guid);
          if (isset($j->value[0])) {
            $data['guid'] = $j->value[0]->incidentid;
          }
        }
      }
      if ($data['guid']) {
        if (notification_send_dynamics($data)) {
          $msg = 'ok';
        }
        else {
          $msg = 'There was a Dynamics error';
        }
      }
    }
    $db->delete('acas_notify_errors')
    ->condition('id', $id, '=')
    ->execute();
  }
  else {
    $msg = 'Failed to parse JSON';
  }
  if (isset($data['acas_eccaserefnumber'])) {
    $ref = $data['acas_eccaserefnumber'];
  }
  else {
    $ref = $data['acas_ecref'];
  }
  if ($msg != 'ok') {
    drupal_set_message(Markup::create('Failed to re-submit ' . $ref . '. Message = <i>' . $msg . '</i><br />This error is now the first entry in the list below.'), 'error');
  }
  else {
    drupal_set_message('Successfully re-submited ' . $ref);
  }
  return 'ok';
}

/**
 * Implements companiesHouseApi class
 *
 * The companies house API
 *
 */
final class companiesHouseApi {
  const API_ENDPOINT = 'https://api.companieshouse.gov.uk';
  private $api_key = null;
  /**
   * @param $api_key
   */
  public function __construct($api_key) {
    if (!empty($api_key)) {
      $this->api_key = $api_key;
    }
    else {
      throw new InvalidArgumentException('Please supply a valid API key');
    }
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return mixed
   */
  public function send($endpoint, array $payload = []) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $this->getRequestUrl($endpoint, $payload));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERPWD, $this->api_key . ':');
    $result = curl_exec($ch);
    curl_close($ch);
    if ($json = json_decode($result, true)) {
      $result = $json;
    }
    return $result;
  }
  /**
   * @param string $endpoint
   * @param array  $payload
   *
   * @return string
   */
  private function getRequestUrl($endpoint, array $payload) {
    $payload = array_merge($payload, ['ts' => time()]);
    $qs = '?' . http_build_query($payload);
    return self::API_ENDPOINT . $endpoint . $qs;
  }
}