<?php

/**
 * @file
 * Contains general.module.
 * Hooks & general code for the Acas site
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use \CloudConvert\Api;
use Sunra\PhpSimple\HtmlDomParser;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Link;
use \Drupal\Core\Access\AccessResult;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas general module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 */
function general_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && ($entity->bundle() == 'landing_page' || $entity->bundle() == 'details_page')) {
    general_menu_full_first_level();
  }
}

/**
 * Implements hook_entity_delete().
 */
function general_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && ($entity->bundle() == 'landing_page' || $entity->bundle() == 'details_page')) {
    general_menu_full_first_level();
  }
}

/**
 * Implements hook_entity_update().
 */
function general_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && ($entity->bundle() == 'landing_page' || $entity->bundle() == 'details_page')) {
    general_menu_full_first_level();
  }
  if ($entity->getEntityTypeId() == 'taxonomy_term' && $entity->bundle() == 'acas') {
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
    $query->fields('ti', array('nid'));
    $query->condition('ti.tid', $entity->id(), '=');
    $result = $query->execute();
    if ($nid = $result->fetchCol()) {
      $node = \Drupal\node\Entity\Node::load($nid[0]);
      if ($node->getTitle() != $entity->getName()) {
        $node->setTitle($entity->getName());
        $node->save();
        general_menu_full_first_level();
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function general_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_view') {
    $group = $implementations['general'];
    unset($implementations['general']);
    $implementations['general'] = $group;
  }
}

/**
 * Implements hook_entity_view().
 */
function general_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full' && $entity instanceof \Drupal\node\NodeInterface && ($entity->getType() == 'details_page' || $entity->getType() == 'support_page' || $entity->getType() == 'secondary_page')) {
    if ($entity->getType() == 'details_page') {
      $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($entity->get('field_taxonomy')->target_id);
      $markup = '';
      $section = '<ul class="section"><li>In:</li>';
      foreach($parents as $parent) {
        $markup .= '<span class="parent-name">' . $parent->getName() . '</span><span class="parent-description">' . $parent->getDescription() . '</span>';
        $section .= '<li>' . $parent->getName() . '</li>';
      }
      $section .= '</ul>';
      $build['taxonomy'] = [
        '#markup' => '<div class="taxonomy-parent">' . $markup . '</div>',
        '#weight' => 990,
      ];
    }
    if ($entity->get('field_print_download')->value) {
      $print_guide = '';
      $download_guide = '';
      if ($parent = _is_guide($entity)) {
        $build['print_download_email'] = [
          '#markup' => '<div class="print-download-email">
            <a class="btn-save btn-save--print print-opener" href="/guide-print/' . $parent . '"><span>Print</span></a>
            <a class="btn-save btn-save--download download-opener" href="/guide-download/' . $parent . '"><span>Download</span></a>
            <div id="guide_print_download_overlay" class="hidden"></div>
            <div id="guide_print_modal" class="modal hidden">
              <div class="title-wrapper"><span class="title">Print</span><span class="close">close<span class="x">X</span></span></div>
              <div class="body-wrapper">
                <div class="action print-page">
                  <a class="btn-panel btn-panel--print-page" nid="' . $parent . '" href="/page-print/' . $entity->id() . '">
                    <div class="icon"></div>
                    <span>Print this page</span>
                  </a>
                </div>
                <div class="action print-guide">
                  <a class="btn-panel btn-panel--print-guide" nid="' . $parent . '" href="/guide-print/' . $parent . '">
                    <div class="icon"></div>
                    <span>Print entire guide</span>
                  </a>
                </div>
              </div>
            </div>
            <div id="guide_download_modal" class="modal hidden">
              <div class="title-wrapper"><span class="title">Download</span><span class="close">close<span class="x">X</span></span></div>
              <div class="body-wrapper">
                <div class="action download-page">
                  <a class="btn-panel btn-panel--download-page" nid="' . $parent . '" href="/page-download/' . $entity->id() . '?' . time() . '">
                    <div class="icon"></div>
                    <span>Download this page</span>
                  </a>
                </div>
                <div class="action download-guide">
                  <a class="btn-panel btn-panel--download-guide" nid="' . $parent . '" href="/guide-download/' . $parent . '?' . time() . '">
                    <div class="icon"></div>
                    <span>Download entire guide</span>
                  </a>
                </div>
              </div>
            </div>
          </div>',
          '#weight' => 992,
        ];
        $build['print_download_email']['#attached']['library'][] = 'general/guide_print_download';
      }else{
        $build['print_download_email'] = [
          '#markup' => '<div class="print-download-email">
            <a class="btn-save btn-save--print print" href="/page-print/' . $entity->id() . '"><span>Print</span></a>
            <a class="btn-save btn-save--download" href="/page-download/' . $entity->id() . '"><span>Download</span></a>
          </div>',
          '#weight' => 992,
        ];
        $build['print_download_email']['#attached']['library'][] = 'general/print';
      }
    }
    if ($entity->hasField('field_current_website')) {
      if ($url = $entity->field_current_website->uri) {
        $title = 'view a version of this page';
        if ($entity->field_current_website->title) {
          $title = $entity->field_current_website->title;
        }
        $build['current_website'] = [
          '#markup' => '<div class="callout-beta"><p>This is our beta website, pages are being tested and improved. You can <a href="' . $url . '">' . $title . '</a> on the current website.</p></div>',
          '#weight' => 999,
        ];
      }
    }
  }elseif ($view_mode == 'search_index' && $entity instanceof \Drupal\node\NodeInterface) {
    if ($entity->hasField('field_taxonomy')) {
      $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($entity->get('field_taxonomy')->target_id);
      $parents = array_reverse($parents, TRUE);
      $section = '<ul class="breadcrumb--search"><li>In:</li>';
      $url = '';
      foreach($parents as $parent) {
        if ($entity->getType() == 'secondary_page') {
          $url = '/' . general_taxonomy_path($parent->getName());
          $section .= '<li><a href="' . $url . '">' . $parent->getName() . '</a></li>';
        }else{
          if ($entity->get('field_taxonomy')->target_id != $parent->id()) {
            $url = '/' . general_taxonomy_path($parent->getName());
            $section .= '<li><a href="' . $url . '">' . $parent->getName() . '</a></li>';
          }
        }
      }
      $section .= '</ul>';
      $build['section'] = [
        '#markup' => $section,
        '#weight' => 990,
      ];
    }
    if ($entity->getType() == 'details_page' && _is_guide($entity)) {
      $query = \Drupal::database()->select('taxonomy_index', 'ti');
      $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
      $query->join('node_field_data', 'nfd', 'nfd.nid = ti.nid');
      $query->leftJoin('node__field_weight', 'w' , 'w.entity_id = ti.nid');
      $query->fields('ti', array('nid'));
      $query->condition('ti.tid', $entity->get('field_taxonomy')->target_id, '=');
      $query->condition('nfd.type', 'secondary_page', '=');
      $query->orderBy('w.field_weight_value', 'ASC');
      $result = $query->execute();
      if($nodeIds = $result->fetchCol()) {
        $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
        $output = '<div class="chapters--search"><h2>Chapters</h2><ul><li><a href="' . $entity->toUrl()->toString() . '">' . $entity->get('field_overview_title')->value . '</a></li>';
        foreach($nodes as $n) {
          $output .= '<li><a href="' . $n->toUrl()->toString() . '">' . $n->getTitle() . '</a></li>';
        }
        $build['chapters'] = [
          '#markup' => $output . '</ul></div>',
          '#weight' => 980,
        ];
      }
    }
  }
  if ($view_mode == 'default' && $entity instanceof \Drupal\node\NodeInterface && $entity->getType() == 'details_page') {
    // Include all chapter pages for internal search as they are excluded
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
    $query->join('node_field_data', 'nfd', 'nfd.nid = ti.nid');
    $query->join('node__field_weight', 'w' , 'w.entity_id = ti.nid');
    $query->fields('ti', array('nid'));
    $query->condition('ti.tid', $entity->get('field_taxonomy')->target_id, '=');
    $query->condition('nfd.type', 'secondary_page', '=');
    $query->orderBy('w.field_weight_value', 'ASC');
    $result = $query->execute();
    if ($nodeIds = $result->fetchCol()) {
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $chapters = '';
      $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
      foreach($nodes as $node) {
        $view = $view_builder->view($node, 'full');
        $chapters .= drupal_render($view);
      }
      $build['chapters'] = [
        '#markup' => '<div id="chapters" class="hidden">' . $chapters . '</div>',
        '#weight' => 900,
      ];
    }
  }
  if ($entity instanceof \Drupal\node\NodeInterface) {
    unset($build['printable_navigation']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the search_block_form form.
 */
function general_form_header_search_alter(&$form, FormStateInterface $form_state) {
  // NB so that these are not added to the get query params
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter
 */

function general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && \Drupal::theme()->getActiveTheme()->getName() == 'acas') {
    $config = \Drupal::config('acas.settings');
    $form['keys']['#attributes']['placeholder'] = $config->get('search_placeholder');
    $form['keys']['#attributes']['autocomplete'] = 'off';
    $form['keys']['#title'] = $config->get('search_placeholder');
    $form['keys']['#title_display'] = 'invisible';
    $form['#attributes']['onsubmit'] = 'return viewsExposedSubmitForm(this);';
    $form['#attached']['library'][] = 'general/views_exposed_form_submit';
    if (@$form['op']) {
      $form['#attached']['library'][] = 'general/views_exposed_form';
    }
  }
  if ($form_id == 'taxonomy_overview_terms') {
    $form['#submit'][] = 'general_taxonomy_overview_terms_submit';
  }
  if ($form_id == 'user_login_form') {
    $form['#submit'][] = 'general_user_login_submit';
    $form['#https'] = TRUE;
  }
  if ($form_id == 'sync_form') {
    $form['actions']['submit']['#value'] = 'Start syncronisation to Productioon';
  }
  if ($form_id == 'system_performance_settings') {
    $form['caching']['page_cache_maximum_age']['#options'][31557600] = '1 year (for CloudFront)';
  }
  if (strpos($form_id, 'node_') !== FALSE && strpos($form_id, '_form') !== FALSE) {
    $config = \Drupal::config('acas.settings');
    if ($config->get('freeze')) {
      $response = new RedirectResponse('/admin/freeze');
      $response->send();
    }else{
      $form['moderation_state']['widget'][0]['state']['#default_value'] = 'draft';
      $form['field_summary']['widget'][0]['summary']['#description'] = t('The summary does not appear on the page. It is shown on Landing Pages and in the search results and is the meta-description tag (for Google etc.)');
      //$form['revision_log']['widget'][0]['value']['#required'] = TRUE;
    }
  }
  if ($form_id == 'content_moderation_entity_moderation_form') {
    $form['current']['#suffix'] = '<div id="close">X</div>';
    $form['#attached']['library'][] = 'general/content_moderation';
    $form['revision_log']['#required'] = TRUE;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function general_page_attachments_alter(&$build) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == 'seven') {
    $build['#attached']['library'][] = 'general/extra.admin';
  }
  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_numeric($node)) {
    $node = \Drupal\node\Entity\Node::load($node);
  }
  if ($node instanceof \Drupal\node\NodeInterface && ($node->getType() == 'details_page' || $node->getType() == 'support_page')) {
    $build['#attached']['library'][] = 'general/details_page';
  }
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'general.sync_prod' || $route_name == 'general.test_prod') {
    $build['#attached']['library'][] = 'general/test_prod';
  }
  /*
  if ($theme == 'acas') {
    $user = \Drupal::currentUser();
    if ($user->id()) {
      $build['#attached']['library'][] = 'general/missing';
    }
  }
  */
  foreach ($build['#attached']['html_head'] as $key => $attachment) {
    if ($attachment[1] == 'system_meta_generator') {
      unset($build['#attached']['html_head'][$key]);
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Convert the file to html via the CloudConvert service
 * https://cloudconvert.com
 */
function general_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function general_pathauto_alias_alter(&$alias, array &$context) {
  if ($entity = @$context['data']['node']) {
    if (($context['bundle'] === 'details_page' || $context['bundle'] === 'landing_page') && ($context['op'] == 'insert' || $context['op'] == 'update')) {
      $alias = '/' . general_taxonomy_path($entity->getTitle());
      /*
      $entity = $context['data']['node'];
      $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($entity->get('field_taxonomy')->target_id);
      $parents = array_reverse($parents, TRUE);
      $alias = '';
      foreach($parents as $parent) {
        $alias .= '/' . general_taxonomy_path($parent->getName());
      }
      if ($context['bundle'] === 'secondary_page') {
        $alias .= '/' . general_taxonomy_path($entity->getTitle());
      }
      */
    }else if ($context['bundle'] === 'secondary_page') {
      if ($nid = _is_guide($entity)) {
        $node = \Drupal\node\Entity\Node::load($nid);
        $alias = '/' . general_taxonomy_path($node->getTitle()) . '/' . general_taxonomy_path($entity->getTitle());
      }
    }
  }
}

function general_taxonomy_path($name) {
  $name = str_replace('/', ' ', strtolower($name));
  $name = str_replace(':', '', $name);
  $name = preg_replace("/[^A-Za-z0-9 ]/", '', $name);
  $name = str_replace('  ', ' ', $name);
  $name = str_replace(' ', '-', trim($name));
  return $name;
}

function general_taxonomy_overview_terms_submit($form, &$form_state) {
  $args = $form_state->getBuildInfo()['args'];
  if ($args[0]->id() == 'acas') {
    general_menu_full_first_level();
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function general_taxonomy_term_update($term) {
  if ($term->getVocabularyId() == 'acas') {
    general_menu_full_first_level();
  }
}

/**
 * general_menu_full_first_level().
 * Builds the Main navigation menu
 * Called whenever Taxonomy changes
 */
 function general_menu_full_first_level() {
  $menu_name = 'main';
  $menu_handler = \Drupal::service('plugin.manager.menu.link');
  $menu_handler->deleteLinksInMenu($menu_name);
  // Get top level
  $children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('acas', 0, 1);
  $termIds = [];
  foreach ($children as $value) {
    $term = \Drupal\taxonomy\Entity\Term::load($value->tid);
    if ($term->get('field_enabled')->value) {
      $termIds[$value->tid] = $value->tid;
    }
  }
  $query = \Drupal::database()->select('taxonomy_index', 'ti');
  $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
  $query->fields('ti', array('nid'));
  $query->condition('ti.tid', $termIds, 'IN');
  $query->orderBy('fd.weight', 'ASC');
  $result = $query->execute();
  $weight = 0;
  if($nodeIds = $result->fetchCol()){
    $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
    foreach($nodes as $node) {
      $first_level = MenuLinkContent::create([
        'title' => $node->getTitle(),
        'link' => ['uri' => 'internal:' . $node->toUrl()->toString()],
        'menu_name' => $menu_name,
        'expanded' => TRUE,
        'weight' => $weight,
      ]);
      $first_level->save();
      $weight++;
      general_menu_full_second_level($first_level, $node->get('field_taxonomy')->target_id, $weight);
    }
  }
}

function general_menu_full_second_level($first_level, $tid, &$weight) {
  if ($children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadChildren($tid)) {
    foreach ($children as $key => $value) {
      if ($value->get('field_enabled')->value) {
        // See if have node
        $query = \Drupal::database()->select('taxonomy_index', 'ti');
        $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
        $query->fields('ti', array('nid'));
        $query->condition('ti.tid', $key, '=');
        $result = $query->execute();
        if ($nid = $result->fetchCol()) {
          $node = \Drupal\node\Entity\Node::load($nid[0]);
          if ($node->getType() != 'secondary_page') {
            $second_level = MenuLinkContent::create([
              'title' => $node->getTitle(),
              'link' => ['uri' => 'internal:' . $node->toUrl()->toString()],
              'parent' => $first_level->getPluginId(),
              'expanded' => TRUE,
              'weight' => $weight,
            ]);
          }
          if (@$second_level) {
            $second_level->save();
            $weight++;
            if ($node->getType() == 'details_page') {
              general_menu_secondary_pages($second_level, $node, $weight);
            }
          }
        }else if ($first_level){
          /*
          // No node. See if have link to external site
          $second_level = MenuLinkContent::create([
            'title' => $value->getName(),
            'link' => ['uri' => 'internal:' . $value->toUrl()->toString()],
            'parent' => $first_level->getPluginId(),
            'expanded' => TRUE,
            'weight' => $weight,
          ]);
          $second_level->save();
          $weight++;
          */
        }
      }
      if (@$second_level) {
        general_menu_full_second_level($second_level, $key, $weight);
      }
    }
  }
}

function general_menu_secondary_pages($first_level, $node, $weight) {
  $query = \Drupal::database()->select('taxonomy_index', 'ti');
  $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
  $query->join('node_field_data', 'nfd', 'nfd.nid = ti.nid');
  $query->fields('ti', array('nid'));
  $query->condition('ti.tid', $node->get('field_taxonomy')->target_id, '=');
  $query->condition('nfd.type', 'secondary_page', '=');
  $query->orderBy('fd.weight', 'ASC');
  $result = $query->execute();
  if($nodeIds = $result->fetchCol()){
    $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
    foreach($nodes as $node) {
      $second_level = MenuLinkContent::create([
        'title' => $node->getTitle(),
        'link' => ['uri' => 'internal:' . $node->toUrl()->toString()],
        'parent' => $first_level->getPluginId(),
        'expanded' => TRUE,
        'weight' => $weight,
      ]);
      $second_level->save();
      $weight++;
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function general_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (strpos($view->current_display, 'rest_export') !== FALSE) {
    $filters = $view->display_handler->getOption('filters');
    if (@$_GET['start']) {
      $query->addWhere(1, '.start_date', strtotime($_GET['start']), '=');
    }
    if (@$_GET['end']) {
      $query->addWhere(1, '.end_date', strtotime($_GET['end']), '=');
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function general_views_pre_render(\Drupal\views\ViewExecutable $view) {

}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function general_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  /*
  $links = $breadcrumb->getLinks();
  if (count($links) < 3) {
    $link = Link::createFromRoute('Home', '<front>');
    $breadcrumb->links[0] = $link;
  }
  */
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function general_ckeditor_css_alter(&$css, $editor) {
  $css[] = drupal_get_path('module', 'general') . '/css/ckeditor.css';
}

/**
 * general_guide_page()
 * Build the entire guide page for print or download
 */
function general_guide_page($nid) {
  $build = [];
  $node = \Drupal\node\Entity\Node::load($nid);
  if ($node->hasField('field_taxonomy')) {
    if ($node->getType() != 'details_page') {
      // Get the parent details page
      $query = \Drupal::database()->select('taxonomy_index', 'ti');
      $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
      $query->join('node_field_data', 'nfd', 'nfd.nid = ti.nid');
      $query->fields('ti', array('nid'));
      $query->condition('ti.tid', $node->get('field_taxonomy')->target_id, '=');
      $query->condition('nfd.type', 'details_page', '=');
      $result = $query->execute();
      $nid = $result->fetchCol();
      $node = \Drupal\node\Entity\Node::load($nid[0]);
    }
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $build[] = [
      '#type' => 'markup',
      '#markup' => '<div class="col-xs-8 col-sm-6"><section id="block-sitebranding" class="block block-system block-system-branding-block clearfix"><img src="https://' . $_SERVER['HTTP_HOST'] . '/themes/custom/acas/toplogo.png" alt="Home"></section></div>
        <header id="block-acas-page-title" class="block block-core block-page-title-block clearfix col-xs-12 col-md-7"><h1 class="page-header"><span>' . $node->getTitle() . '</span></h1></header>'
    ];
    $count = 1;
    $a = $node->get('field_summary')->getValue();
    $b = explode('<h2>', $a[0]['value']);
    if (count($b) == 1) {
      $b = explode('<h2 dir="ltr">', $a[0]['value']);
    }
    if (count($b) > 1) {
      $c = explode('</h2>', $b[1]);
      $c[0] = $count . '. ' . $c[0];
      $b[1] = implode('</h2>', $c);
      $a[0]['value'] = implode('<h2 class="guide-page-title" dir="ltr">', $b);
      $node->set('field_summary', $a);
    }
    $build[] = $view_builder->view($node, 'print_download');
    if ($node->hasField('field_taxonomy')) {
      $query = \Drupal::database()->select('taxonomy_index', 'ti');
      $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
      $query->join('node_field_data', 'nfd', 'nfd.nid = ti.nid');
      $query->leftJoin('node__field_weight', 'w' , 'w.entity_id = ti.nid');
      $query->fields('ti', array('nid'));
      $query->condition('ti.tid', $node->get('field_taxonomy')->target_id, '=');
      $query->condition('nfd.type', 'secondary_page', '=');
      $query->orderBy('w.field_weight_value', 'ASC');
      $result = $query->execute();
      if($nodeIds = $result->fetchCol()) {
        $nodes = \Drupal\node\Entity\Node::loadMultiple($nodeIds);
        foreach($nodes as $n) {
          $a = $n->get('field_summary')->getValue();
          $b = explode('<h2>', $a[0]['value']);
          if (count($b) == 1) {
            $b = explode('<h2 dir="ltr">', $a[0]['value']);
          }
          if (count($b) > 1) {
            $count++;
            $c = explode('</h2>', $b[1]);
            $c[0] = $count . '. ' . $c[0];
            $b[1] = implode('</h2>', $c);
            $a[0]['value'] = implode('<h2 class="guide-page-title" dir="ltr">', $b);
            $n->set('field_summary', $a);
          }
          $build[] = $view_builder->view($n, 'print_download');
        }
      }
    }
  }
  $build['#attached']['library'][] = 'general/guide_print_modify';
  return $build;
}

/**
 * general_sync_prod().
 * UAT
 * Zips a subset of the DB and posts the base64 encoded zip file to prod
 */
function general_sync_prod() {
  $config = \Drupal::config('acas.settings');
  $connection = \Drupal\Core\Database\Database::getConnection()->getConnectionOptions();
  $output = '';
  $file = 'DB_' . time() . '.sql';
  $path = '/tmp/' . $file;
  $exclude = preg_split('/\r\n|\r|\n/', $config->get('tables'));
  $tables = '';
  $database = $connection['database'];
  foreach($exclude as $t) {
    $tables .= " --ignore-table=$database.$t";
  }
  $cmd = 'mysqldump -u ' . $connection['username'] . ' -p' . $connection['password'] . ' -h ' . $connection['host'] . ' ' . $connection['database'] . $tables . ' > ' . $path;
  exec($cmd);
  // Zip, Base64, curl to prod
  $zip_file = str_replace('.sql', '.zip', $path);
  $zip = new ZipArchive();
  $zip->open($zip_file, constant("ZipArchive::CREATE"));
  $zip->addFile($path, $file);
  $zip->close();
  $encoded = base64_encode(file_get_contents($zip_file));
  unlink($path);
  unlink($zip_file);
  $POST_DATA = array(
    'data' => $encoded,
    'UUID' => \Drupal::config('system.site')->get('uuid'),
    'file' => $file,
  );
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $config->get('prod') . '/sync-update');
  curl_setopt($curl, CURLOPT_TIMEOUT, 30);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $POST_DATA);
  $response = curl_exec($curl);
  curl_close ($curl);
  drupal_set_message('Finished syncing content to Production');
}

function _is_site($site = 'beta') {
  $a = explode('.', $_SERVER['HTTP_HOST']);
  if (strpos($a[0], $site) !== FALSE) {
    return TRUE;
  }
  return FALSE;
}

function _is_guide($entity) {
  if ($entity->getType() == 'secondary_page') {
    // Get the parent details page
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
    $query->join('node_field_data', 'nfd', 'nfd.nid = ti.nid');
    $query->fields('ti', array('nid'));
    $query->condition('ti.tid', $entity->get('field_taxonomy')->target_id, '=');
    $query->condition('nfd.type', 'details_page', '=');
    $result = $query->execute();
    if ($nid = $result->fetchCol()) {
      return $nid[0];
    }
  }else if ($entity->getType() == 'details_page') {
    // See if has secondary pages
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->join('taxonomy_term_field_data', 'fd', 'fd.tid = ti.tid');
    $query->join('node_field_data', 'nfd', 'nfd.nid = ti.nid');
    $query->fields('ti', array('nid'));
    $query->condition('ti.tid', $entity->get('field_taxonomy')->target_id, '=');
    $query->condition('nfd.type', 'secondary_page', '=');
    $result = $query->execute();
    if($nodeIds = $result->fetchCol()) {
      return $entity->id();
    }
  }
  return FALSE;
}

/**
 * general_user_login_submit().
 * Redirect the user to their workbench after login
 */
function general_user_login_submit($form, &$form_state) {
  $form_state->setRedirect('workbench.content');
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 * Add the changed content URL to the notification email
 */
function general_content_moderation_notification_mail_data_alter($entity, &$data) {
  $data['params']['message'] .= '<a href="' . $entity->toUrl('canonical', ['absolute' => TRUE])->toString() . '">' . $entity->getTitle() . '</a>';
  $vids = \Drupal::entityManager()->getStorage('node')->revisionIds($entity);
  $vid = array_pop($vids);
  $node_revision = \Drupal::entityTypeManager()
  ->getStorage('node')
  ->loadRevision($vid);
  $data['params']['message'] .= '<br /><p>Last log message: <b>' . $node_revision->get('revision_log')->value . '</b></p>';
}

function general_download_html_alter($html) {
  $html = str_replace('href="/', 'href="https://' . $_SERVER['HTTP_HOST'] . '/', $html);
  return $html;
}

function general_download_css() {
  $css = file_get_contents(drupal_get_path('module', 'general') . '/css/download.css');
  $css = str_replace('[SITE]', 'https://' . $_SERVER['HTTP_HOST'], $css);
  return $css;
}

/**
  * general_cloudfront_invalidate().
  * Invalidate the CloudFront cache for new content
  * or if $all, invalidate all content
  */
function general_cloudfront_invalidate($all = FALSE) {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('cloudfront.settings');
  if ((!$last = $config->get('last_sync')) || $all) {
    $last = 0;
  }
  if (!$all) {
    $query = \Drupal::database()->select('node_field_data', 'nfd');
    $query->fields('nfd', array('nid'));
    $query->condition('nfd.changed', $last, '>');
    $result = $query->execute();
    if ($nodeIds = $result->fetchCol()) {
      $paths = '';
      foreach($nodeIds as $n) {
        $path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $n);
        $paths .= '<Path>' . $path . '</Path>';
        if ($path == '/home') {
          $paths .= '<Path>/</Path>';
        }
      }
    }else{
      return 'Nothing to invalidate';
    }
  }else{
    $paths = '<Path>/*</Path>';
  }
  $distribution = $config->get('id');
  $access_key = $config->get('key');
  $epoch = date('U');
  $xml = "<InvalidationBatch>$paths<CallerReference>{$distribution}{$epoch}</CallerReference></InvalidationBatch>";
  $len = strlen($xml);
  $date = gmdate('D, d M Y G:i:s T');
  $sig = base64_encode(
    hash_hmac('sha1', $date, $config->get('secret'), true)
  );
  $msg = "POST /2010-11-01/distribution/{$distribution}/invalidation HTTP/1.0\r\n";
  $msg .= "Host: cloudfront.amazonaws.com\r\n";
  $msg .= "Date: {$date}\r\n";
  $msg .= "Content-Type: text/xml; charset=UTF-8\r\n";
  $msg .= "Authorization: AWS {$access_key}:{$sig}\r\n";
  $msg .= "Content-Length: {$len}\r\n\r\n";
  $msg .= $xml;
  $fp = fsockopen('ssl://cloudfront.amazonaws.com', 443,
    $errno, $errstr, 30
  );
  if (!$fp) {
    return "Connection failed: {$errno} {$errstr}\n";
  }
  fwrite($fp, $msg);
  $resp = '';
  while(! feof($fp)) {
    $resp .= fgets($fp, 1024);
  }
  fclose($fp);
  $config->set('last_sync', time());
  $config->save();
  return $resp;
}

/**
 * Implements hook_library_info_alter().
 *
 * Downgrades required libraries to versions compatible with IE8.
 */
function general_library_info_alter(&$libraries, $extension) {
  /*
  if ($extension === 'eu_cookie_compliance') {
    $lib = &$libraries['eu_cookie_compliance'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['version'] = 7;
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/eu_cookie_compliance.js' => $js_options];
    }
    $lib = &$libraries['eu_cookie_compliance_bare'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['version'] = 7;
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/eu_cookie_compliance.js' => $js_options];
    }
  }
  if ($extension === 'bootstrap') {
    if (!$user->id()) {
      $lib = &$libraries['drupal.bootstrap'];
      $js_options = end($lib['js']);
      if (is_array($js_options)) {
        $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/ie8/drupal.bootstrap.js' => $js_options];
      }
    }
  }
  */
  if ($extension === 'core') {
    $lib = &$libraries['drupal.ajax'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/ie8/ajax.js' => $js_options];
    }
  }
   
  if ($extension === 'filter') {
    $lib = &$libraries['drupal.filter.filter_html.admin'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/filter.filter_html.admin.js' => $js_options];
    }
  }
}

/**
 * Implements hook_entity_field_access().
 */
function general_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {
  $access = AccessResult::neutral();
  // Let a user have access to the revision_log widget if they have access to edit the entity.
  if ($operation == 'edit' && $field_definition->getName() == 'revision_log') {
    $entity = $items->getParent()->getValue('entity');
    if ($entity instanceof \Drupal\node\NodeInterface) {
      $type = $entity->getType();
      // Can they edit ANY Node or Any of this entity type?
      if ($account->hasPermission('edit any ' . $type . ' content') || $account->hasPermission('"bypass entity access"')) {
        $access = AccessResult::allowed();
      } else {
        // Does the user own this entity, and can they edit their own entity of this type?
        $owner_id = $entity->getOwnerId();
        if ($owner_id == $account->id() && $account->hasPermission('edit own ' . $type . ' content')) {
          $access = AccessResult::allowed();
        }
      }
    }
    elseif ($entity instanceof \Drupal\block_content\Entity\BlockContent && $account->hasPermission('administer blocks')) {
      $access = AccessResult::allowed();
    }
  }
  return $access;
}


/**
 *
 * Health check
 * Called by Amazon Route53 health checks
 */
function general_health() {
  return '<p>All checks passed</p>';
}
