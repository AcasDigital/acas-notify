<?php

/**
 * @file
 * Contains general.module.
 * Hooks & general code for the Acas Notifications site
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use \CloudConvert\Api;
use Sunra\PhpSimple\HtmlDomParser;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Link;
use \Drupal\Core\Access\AccessResult;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the general module.
    case 'help.page.general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Acas general module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the search_block_form form.
 */
function general_form_header_search_alter(&$form, FormStateInterface $form_state) {
  // NB so that these are not added to the get query params
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter
 */

function general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && \Drupal::theme()->getActiveTheme()->getName() == 'acas') {
    $config = \Drupal::config('acas.settings');
    $form['keys']['#attributes']['placeholder'] = $config->get('search_placeholder');
    $form['keys']['#attributes']['autocomplete'] = 'off';
    $form['keys']['#title'] = $config->get('search_placeholder');
    $form['keys']['#title_display'] = 'invisible';
    $form['#attributes']['onsubmit'] = 'return viewsExposedSubmitForm(this);';
    $form['#attached']['library'][] = 'general/views_exposed_form_submit';
    if (@$form['op']) {
      $form['#attached']['library'][] = 'general/views_exposed_form';
    }
  }
  if ($form_id == 'system_performance_settings') {
    $form['caching']['page_cache_maximum_age']['#options'][31557600] = '1 year (for CloudFront)';
  }
  if ($form_id == 'content_moderation_entity_moderation_form') {
    $form['current']['#suffix'] = '<div id="close">X</div>';
    $form['#attached']['library'][] = 'general/content_moderation';
    $form['revision_log']['#required'] = TRUE;
  }
  if ($form_id == 'tfa_entry_form') {
    $form['code']['#attributes']['autofocus'] = 'autofocus';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function general_page_attachments_alter(&$build) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == 'seven') {
    $build['#attached']['library'][] = 'general/extra.admin';
  }
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'general.sync_prod' || $route_name == 'general.test_prod') {
    $build['#attached']['library'][] = 'general/test_prod';
  }
  if ($theme == 'acas') {
    $user = \Drupal::currentUser();
    if ($user->id()) {
      $build['#attached']['library'][] = 'general/missing';
    }
  }
  foreach ($build['#attached']['html_head'] as $key => $attachment) {
    if ($attachment[1] == 'system_meta_generator') {
      unset($build['#attached']['html_head'][$key]);
    }
  }
}

function general_taxonomy_path($name) {
  $name = str_replace('/', ' ', strtolower($name));
  $name = str_replace(':', '', $name);
  $name = preg_replace("/[^A-Za-z0-9 ]/", '', $name);
  $name = str_replace('  ', ' ', $name);
  $name = str_replace(' ', '-', trim($name));
  return $name;
}

/**
 * Implements hook_views_query_alter().
 */
function general_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (strpos($view->current_display, 'rest_export') !== FALSE) {
    $filters = $view->display_handler->getOption('filters');
    if (@$_GET['start']) {
      $query->addWhere(1, '.start_date', strtotime($_GET['start']), '=');
    }
    if (@$_GET['end']) {
      $query->addWhere(1, '.end_date', strtotime($_GET['end']), '=');
    }
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function general_ckeditor_css_alter(&$css, $editor) {
  $css[] = drupal_get_path('module', 'general') . '/css/ckeditor.css';
}

function _is_site($site = 'beta') {
  $a = explode('.', $_SERVER['HTTP_HOST']);
  if (strpos($a[0], $site) !== FALSE) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 * Add the changed content URL to the notification email
 */
function general_content_moderation_notification_mail_data_alter($entity, &$data) {
  $data['params']['message'] .= '<a href="' . $entity->toUrl('canonical', ['absolute' => TRUE])->toString() . '">' . $entity->getTitle() . '</a>';
  $vids = \Drupal::entityManager()->getStorage('node')->revisionIds($entity);
  $vid = array_pop($vids);
  $node_revision = \Drupal::entityTypeManager()
  ->getStorage('node')
  ->loadRevision($vid);
  $data['params']['message'] .= '<br /><p>Last log message: <b>' . $node_revision->get('revision_log')->value . '</b></p>';
}

function general_download_html_alter($html) {
  $html = str_replace('href="/', 'href="https://' . $_SERVER['HTTP_HOST'] . '/', $html);
  return $html;
}

function general_download_css() {
  $css = file_get_contents(drupal_get_path('module', 'general') . '/css/download.css');
  $css = str_replace('[SITE]', 'https://' . $_SERVER['HTTP_HOST'], $css);
  return $css;
}

/**
 * Implements hook_library_info_alter().
 *
 * Downgrades required libraries to versions compatible with IE8.
 */
function general_library_info_alter(&$libraries, $extension) {
  /*
  if ($extension === 'eu_cookie_compliance') {
    $lib = &$libraries['eu_cookie_compliance'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['version'] = 7;
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/eu_cookie_compliance.js' => $js_options];
    }
    $lib = &$libraries['eu_cookie_compliance_bare'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['version'] = 7;
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/eu_cookie_compliance.js' => $js_options];
    }
  }
  if ($extension === 'bootstrap') {
    if (!$user->id()) {
      $lib = &$libraries['drupal.bootstrap'];
      $js_options = end($lib['js']);
      if (is_array($js_options)) {
        $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/ie8/drupal.bootstrap.js' => $js_options];
      }
    }
  }
  
  if ($extension === 'core') {
    $lib = &$libraries['drupal.ajax'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/ie8/ajax.js' => $js_options];
    }
  }
  */
  if ($extension === 'filter') {
    $lib = &$libraries['drupal.filter.filter_html.admin'];
    $js_options = end($lib['js']);
    if (is_array($js_options)) {
      $lib['js'] = ['/' . drupal_get_path('module', 'general') . '/js/filter.filter_html.admin.js' => $js_options];
    }
  }
}

/**
 * Implements hook_entity_field_access().
 */
function general_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {
  $access = AccessResult::neutral();
  // Let a user have access to the revision_log widget if they have access to edit the entity.
  if ($operation == 'edit' && $field_definition->getName() == 'revision_log') {
    $entity = $items->getParent()->getValue('entity');
    if ($entity instanceof \Drupal\node\NodeInterface) {
      $type = $entity->getType();
      // Can they edit ANY Node or Any of this entity type?
      if ($account->hasPermission('edit any ' . $type . ' content') || $account->hasPermission('"bypass entity access"')) {
        $access = AccessResult::allowed();
      } else {
        // Does the user own this entity, and can they edit their own entity of this type?
        $owner_id = $entity->getOwnerId();
        if ($owner_id == $account->id() && $account->hasPermission('edit own ' . $type . ' content')) {
          $access = AccessResult::allowed();
        }
      }
    }
    elseif ($entity instanceof \Drupal\block_content\Entity\BlockContent && $account->hasPermission('administer blocks')) {
      $access = AccessResult::allowed();
    }
  }
  return $access;
}


/**
 *
 * Health check
 * Called by Amazon Route53 health checks
 */
function general_health() {
  return '<p>All checks passed</p>';
}
